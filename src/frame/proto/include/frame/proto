// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uniform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uniform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_uniform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "math.pb.h"
#include "plugin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_uniform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uniform_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uniform_2eproto;
namespace frame {
namespace proto {
class Uniform;
struct UniformDefaultTypeInternal;
extern UniformDefaultTypeInternal _Uniform_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::Uniform* Arena::CreateMaybeMessage<::frame::proto::Uniform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

enum Uniform_UniformEnum : int {
  Uniform_UniformEnum_INVALID = 0,
  Uniform_UniformEnum_PROJECTION_MAT4 = 1,
  Uniform_UniformEnum_PROJECTION_INV_MAT4 = 2,
  Uniform_UniformEnum_VIEW_MAT4 = 3,
  Uniform_UniformEnum_VIEW_INV_MAT4 = 4,
  Uniform_UniformEnum_MODEL_MAT4 = 5,
  Uniform_UniformEnum_MODEL_INV_MAT4 = 6,
  Uniform_UniformEnum_FLOAT_TIME_S = 7,
  Uniform_UniformEnum_Uniform_UniformEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Uniform_UniformEnum_Uniform_UniformEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Uniform_UniformEnum_IsValid(int value);
constexpr Uniform_UniformEnum Uniform_UniformEnum_UniformEnum_MIN = Uniform_UniformEnum_INVALID;
constexpr Uniform_UniformEnum Uniform_UniformEnum_UniformEnum_MAX = Uniform_UniformEnum_FLOAT_TIME_S;
constexpr int Uniform_UniformEnum_UniformEnum_ARRAYSIZE = Uniform_UniformEnum_UniformEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Uniform_UniformEnum_descriptor();
template<typename T>
inline const std::string& Uniform_UniformEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Uniform_UniformEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Uniform_UniformEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Uniform_UniformEnum_descriptor(), enum_t_value);
}
inline bool Uniform_UniformEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Uniform_UniformEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Uniform_UniformEnum>(
    Uniform_UniformEnum_descriptor(), name, value);
}
// ===================================================================

class Uniform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Uniform) */ {
 public:
  inline Uniform() : Uniform(nullptr) {}
  ~Uniform() override;
  explicit PROTOBUF_CONSTEXPR Uniform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uniform(const Uniform& from);
  Uniform(Uniform&& from) noexcept
    : Uniform() {
    *this = ::std::move(from);
  }

  inline Uniform& operator=(const Uniform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uniform& operator=(Uniform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uniform& default_instance() {
    return *internal_default_instance();
  }
  enum ValueOneofCase {
    kUniformInt = 2,
    kUniformFloat = 4,
    kUniformFloatPlugin = 19,
    kUniformIntPlugin = 20,
    kUniformEnum = 5,
    kUniformVec2 = 6,
    kUniformVec3 = 7,
    kUniformVec4 = 8,
    kUniformQuat = 9,
    kUniformMat4 = 10,
    kUniformInts = 11,
    kUniformFloats = 13,
    kUniformVec2S = 14,
    kUniformVec3S = 15,
    kUniformVec4S = 16,
    kUniformQuats = 17,
    kUniformMat4S = 18,
    VALUE_ONEOF_NOT_SET = 0,
  };

  static inline const Uniform* internal_default_instance() {
    return reinterpret_cast<const Uniform*>(
               &_Uniform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Uniform& a, Uniform& b) {
    a.Swap(&b);
  }
  inline void Swap(Uniform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uniform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uniform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uniform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uniform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Uniform& from) {
    Uniform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uniform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Uniform";
  }
  protected:
  explicit Uniform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Uniform_UniformEnum UniformEnum;
  static constexpr UniformEnum INVALID =
    Uniform_UniformEnum_INVALID;
  static constexpr UniformEnum PROJECTION_MAT4 =
    Uniform_UniformEnum_PROJECTION_MAT4;
  static constexpr UniformEnum PROJECTION_INV_MAT4 =
    Uniform_UniformEnum_PROJECTION_INV_MAT4;
  static constexpr UniformEnum VIEW_MAT4 =
    Uniform_UniformEnum_VIEW_MAT4;
  static constexpr UniformEnum VIEW_INV_MAT4 =
    Uniform_UniformEnum_VIEW_INV_MAT4;
  static constexpr UniformEnum MODEL_MAT4 =
    Uniform_UniformEnum_MODEL_MAT4;
  static constexpr UniformEnum MODEL_INV_MAT4 =
    Uniform_UniformEnum_MODEL_INV_MAT4;
  static constexpr UniformEnum FLOAT_TIME_S =
    Uniform_UniformEnum_FLOAT_TIME_S;
  static inline bool UniformEnum_IsValid(int value) {
    return Uniform_UniformEnum_IsValid(value);
  }
  static constexpr UniformEnum UniformEnum_MIN =
    Uniform_UniformEnum_UniformEnum_MIN;
  static constexpr UniformEnum UniformEnum_MAX =
    Uniform_UniformEnum_UniformEnum_MAX;
  static constexpr int UniformEnum_ARRAYSIZE =
    Uniform_UniformEnum_UniformEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UniformEnum_descriptor() {
    return Uniform_UniformEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& UniformEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UniformEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UniformEnum_Name.");
    return Uniform_UniformEnum_Name(enum_t_value);
  }
  static inline bool UniformEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UniformEnum* value) {
    return Uniform_UniformEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUniformIntFieldNumber = 2,
    kUniformFloatFieldNumber = 4,
    kUniformFloatPluginFieldNumber = 19,
    kUniformIntPluginFieldNumber = 20,
    kUniformEnumFieldNumber = 5,
    kUniformVec2FieldNumber = 6,
    kUniformVec3FieldNumber = 7,
    kUniformVec4FieldNumber = 8,
    kUniformQuatFieldNumber = 9,
    kUniformMat4FieldNumber = 10,
    kUniformIntsFieldNumber = 11,
    kUniformFloatsFieldNumber = 13,
    kUniformVec2SFieldNumber = 14,
    kUniformVec3SFieldNumber = 15,
    kUniformVec4SFieldNumber = 16,
    kUniformQuatsFieldNumber = 17,
    kUniformMat4SFieldNumber = 18,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 uniform_int = 2;
  bool has_uniform_int() const;
  private:
  bool _internal_has_uniform_int() const;
  public:
  void clear_uniform_int();
  int32_t uniform_int() const;
  void set_uniform_int(int32_t value);
  private:
  int32_t _internal_uniform_int() const;
  void _internal_set_uniform_int(int32_t value);
  public:

  // float uniform_float = 4;
  bool has_uniform_float() const;
  private:
  bool _internal_has_uniform_float() const;
  public:
  void clear_uniform_float();
  float uniform_float() const;
  void set_uniform_float(float value);
  private:
  float _internal_uniform_float() const;
  void _internal_set_uniform_float(float value);
  public:

  // .frame.proto.Plugin uniform_float_plugin = 19;
  bool has_uniform_float_plugin() const;
  private:
  bool _internal_has_uniform_float_plugin() const;
  public:
  void clear_uniform_float_plugin();
  const ::frame::proto::Plugin& uniform_float_plugin() const;
  PROTOBUF_NODISCARD ::frame::proto::Plugin* release_uniform_float_plugin();
  ::frame::proto::Plugin* mutable_uniform_float_plugin();
  void set_allocated_uniform_float_plugin(::frame::proto::Plugin* uniform_float_plugin);
  private:
  const ::frame::proto::Plugin& _internal_uniform_float_plugin() const;
  ::frame::proto::Plugin* _internal_mutable_uniform_float_plugin();
  public:
  void unsafe_arena_set_allocated_uniform_float_plugin(
      ::frame::proto::Plugin* uniform_float_plugin);
  ::frame::proto::Plugin* unsafe_arena_release_uniform_float_plugin();

  // .frame.proto.Plugin uniform_int_plugin = 20;
  bool has_uniform_int_plugin() const;
  private:
  bool _internal_has_uniform_int_plugin() const;
  public:
  void clear_uniform_int_plugin();
  const ::frame::proto::Plugin& uniform_int_plugin() const;
  PROTOBUF_NODISCARD ::frame::proto::Plugin* release_uniform_int_plugin();
  ::frame::proto::Plugin* mutable_uniform_int_plugin();
  void set_allocated_uniform_int_plugin(::frame::proto::Plugin* uniform_int_plugin);
  private:
  const ::frame::proto::Plugin& _internal_uniform_int_plugin() const;
  ::frame::proto::Plugin* _internal_mutable_uniform_int_plugin();
  public:
  void unsafe_arena_set_allocated_uniform_int_plugin(
      ::frame::proto::Plugin* uniform_int_plugin);
  ::frame::proto::Plugin* unsafe_arena_release_uniform_int_plugin();

  // .frame.proto.Uniform.UniformEnum uniform_enum = 5;
  bool has_uniform_enum() const;
  private:
  bool _internal_has_uniform_enum() const;
  public:
  void clear_uniform_enum();
  ::frame::proto::Uniform_UniformEnum uniform_enum() const;
  void set_uniform_enum(::frame::proto::Uniform_UniformEnum value);
  private:
  ::frame::proto::Uniform_UniformEnum _internal_uniform_enum() const;
  void _internal_set_uniform_enum(::frame::proto::Uniform_UniformEnum value);
  public:

  // .frame.proto.UniformVector2 uniform_vec2 = 6;
  bool has_uniform_vec2() const;
  private:
  bool _internal_has_uniform_vec2() const;
  public:
  void clear_uniform_vec2();
  const ::frame::proto::UniformVector2& uniform_vec2() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector2* release_uniform_vec2();
  ::frame::proto::UniformVector2* mutable_uniform_vec2();
  void set_allocated_uniform_vec2(::frame::proto::UniformVector2* uniform_vec2);
  private:
  const ::frame::proto::UniformVector2& _internal_uniform_vec2() const;
  ::frame::proto::UniformVector2* _internal_mutable_uniform_vec2();
  public:
  void unsafe_arena_set_allocated_uniform_vec2(
      ::frame::proto::UniformVector2* uniform_vec2);
  ::frame::proto::UniformVector2* unsafe_arena_release_uniform_vec2();

  // .frame.proto.UniformVector3 uniform_vec3 = 7;
  bool has_uniform_vec3() const;
  private:
  bool _internal_has_uniform_vec3() const;
  public:
  void clear_uniform_vec3();
  const ::frame::proto::UniformVector3& uniform_vec3() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector3* release_uniform_vec3();
  ::frame::proto::UniformVector3* mutable_uniform_vec3();
  void set_allocated_uniform_vec3(::frame::proto::UniformVector3* uniform_vec3);
  private:
  const ::frame::proto::UniformVector3& _internal_uniform_vec3() const;
  ::frame::proto::UniformVector3* _internal_mutable_uniform_vec3();
  public:
  void unsafe_arena_set_allocated_uniform_vec3(
      ::frame::proto::UniformVector3* uniform_vec3);
  ::frame::proto::UniformVector3* unsafe_arena_release_uniform_vec3();

  // .frame.proto.UniformVector4 uniform_vec4 = 8;
  bool has_uniform_vec4() const;
  private:
  bool _internal_has_uniform_vec4() const;
  public:
  void clear_uniform_vec4();
  const ::frame::proto::UniformVector4& uniform_vec4() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector4* release_uniform_vec4();
  ::frame::proto::UniformVector4* mutable_uniform_vec4();
  void set_allocated_uniform_vec4(::frame::proto::UniformVector4* uniform_vec4);
  private:
  const ::frame::proto::UniformVector4& _internal_uniform_vec4() const;
  ::frame::proto::UniformVector4* _internal_mutable_uniform_vec4();
  public:
  void unsafe_arena_set_allocated_uniform_vec4(
      ::frame::proto::UniformVector4* uniform_vec4);
  ::frame::proto::UniformVector4* unsafe_arena_release_uniform_vec4();

  // .frame.proto.UniformQuaternion uniform_quat = 9;
  bool has_uniform_quat() const;
  private:
  bool _internal_has_uniform_quat() const;
  public:
  void clear_uniform_quat();
  const ::frame::proto::UniformQuaternion& uniform_quat() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformQuaternion* release_uniform_quat();
  ::frame::proto::UniformQuaternion* mutable_uniform_quat();
  void set_allocated_uniform_quat(::frame::proto::UniformQuaternion* uniform_quat);
  private:
  const ::frame::proto::UniformQuaternion& _internal_uniform_quat() const;
  ::frame::proto::UniformQuaternion* _internal_mutable_uniform_quat();
  public:
  void unsafe_arena_set_allocated_uniform_quat(
      ::frame::proto::UniformQuaternion* uniform_quat);
  ::frame::proto::UniformQuaternion* unsafe_arena_release_uniform_quat();

  // .frame.proto.UniformMatrix4 uniform_mat4 = 10;
  bool has_uniform_mat4() const;
  private:
  bool _internal_has_uniform_mat4() const;
  public:
  void clear_uniform_mat4();
  const ::frame::proto::UniformMatrix4& uniform_mat4() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformMatrix4* release_uniform_mat4();
  ::frame::proto::UniformMatrix4* mutable_uniform_mat4();
  void set_allocated_uniform_mat4(::frame::proto::UniformMatrix4* uniform_mat4);
  private:
  const ::frame::proto::UniformMatrix4& _internal_uniform_mat4() const;
  ::frame::proto::UniformMatrix4* _internal_mutable_uniform_mat4();
  public:
  void unsafe_arena_set_allocated_uniform_mat4(
      ::frame::proto::UniformMatrix4* uniform_mat4);
  ::frame::proto::UniformMatrix4* unsafe_arena_release_uniform_mat4();

  // .frame.proto.UniformInts uniform_ints = 11;
  bool has_uniform_ints() const;
  private:
  bool _internal_has_uniform_ints() const;
  public:
  void clear_uniform_ints();
  const ::frame::proto::UniformInts& uniform_ints() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformInts* release_uniform_ints();
  ::frame::proto::UniformInts* mutable_uniform_ints();
  void set_allocated_uniform_ints(::frame::proto::UniformInts* uniform_ints);
  private:
  const ::frame::proto::UniformInts& _internal_uniform_ints() const;
  ::frame::proto::UniformInts* _internal_mutable_uniform_ints();
  public:
  void unsafe_arena_set_allocated_uniform_ints(
      ::frame::proto::UniformInts* uniform_ints);
  ::frame::proto::UniformInts* unsafe_arena_release_uniform_ints();

  // .frame.proto.UniformFloats uniform_floats = 13;
  bool has_uniform_floats() const;
  private:
  bool _internal_has_uniform_floats() const;
  public:
  void clear_uniform_floats();
  const ::frame::proto::UniformFloats& uniform_floats() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformFloats* release_uniform_floats();
  ::frame::proto::UniformFloats* mutable_uniform_floats();
  void set_allocated_uniform_floats(::frame::proto::UniformFloats* uniform_floats);
  private:
  const ::frame::proto::UniformFloats& _internal_uniform_floats() const;
  ::frame::proto::UniformFloats* _internal_mutable_uniform_floats();
  public:
  void unsafe_arena_set_allocated_uniform_floats(
      ::frame::proto::UniformFloats* uniform_floats);
  ::frame::proto::UniformFloats* unsafe_arena_release_uniform_floats();

  // .frame.proto.UniformVector2s uniform_vec2s = 14;
  bool has_uniform_vec2s() const;
  private:
  bool _internal_has_uniform_vec2s() const;
  public:
  void clear_uniform_vec2s();
  const ::frame::proto::UniformVector2s& uniform_vec2s() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector2s* release_uniform_vec2s();
  ::frame::proto::UniformVector2s* mutable_uniform_vec2s();
  void set_allocated_uniform_vec2s(::frame::proto::UniformVector2s* uniform_vec2s);
  private:
  const ::frame::proto::UniformVector2s& _internal_uniform_vec2s() const;
  ::frame::proto::UniformVector2s* _internal_mutable_uniform_vec2s();
  public:
  void unsafe_arena_set_allocated_uniform_vec2s(
      ::frame::proto::UniformVector2s* uniform_vec2s);
  ::frame::proto::UniformVector2s* unsafe_arena_release_uniform_vec2s();

  // .frame.proto.UniformVector3s uniform_vec3s = 15;
  bool has_uniform_vec3s() const;
  private:
  bool _internal_has_uniform_vec3s() const;
  public:
  void clear_uniform_vec3s();
  const ::frame::proto::UniformVector3s& uniform_vec3s() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector3s* release_uniform_vec3s();
  ::frame::proto::UniformVector3s* mutable_uniform_vec3s();
  void set_allocated_uniform_vec3s(::frame::proto::UniformVector3s* uniform_vec3s);
  private:
  const ::frame::proto::UniformVector3s& _internal_uniform_vec3s() const;
  ::frame::proto::UniformVector3s* _internal_mutable_uniform_vec3s();
  public:
  void unsafe_arena_set_allocated_uniform_vec3s(
      ::frame::proto::UniformVector3s* uniform_vec3s);
  ::frame::proto::UniformVector3s* unsafe_arena_release_uniform_vec3s();

  // .frame.proto.UniformVector4s uniform_vec4s = 16;
  bool has_uniform_vec4s() const;
  private:
  bool _internal_has_uniform_vec4s() const;
  public:
  void clear_uniform_vec4s();
  const ::frame::proto::UniformVector4s& uniform_vec4s() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector4s* release_uniform_vec4s();
  ::frame::proto::UniformVector4s* mutable_uniform_vec4s();
  void set_allocated_uniform_vec4s(::frame::proto::UniformVector4s* uniform_vec4s);
  private:
  const ::frame::proto::UniformVector4s& _internal_uniform_vec4s() const;
  ::frame::proto::UniformVector4s* _internal_mutable_uniform_vec4s();
  public:
  void unsafe_arena_set_allocated_uniform_vec4s(
      ::frame::proto::UniformVector4s* uniform_vec4s);
  ::frame::proto::UniformVector4s* unsafe_arena_release_uniform_vec4s();

  // .frame.proto.UniformQuaternions uniform_quats = 17;
  bool has_uniform_quats() const;
  private:
  bool _internal_has_uniform_quats() const;
  public:
  void clear_uniform_quats();
  const ::frame::proto::UniformQuaternions& uniform_quats() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformQuaternions* release_uniform_quats();
  ::frame::proto::UniformQuaternions* mutable_uniform_quats();
  void set_allocated_uniform_quats(::frame::proto::UniformQuaternions* uniform_quats);
  private:
  const ::frame::proto::UniformQuaternions& _internal_uniform_quats() const;
  ::frame::proto::UniformQuaternions* _internal_mutable_uniform_quats();
  public:
  void unsafe_arena_set_allocated_uniform_quats(
      ::frame::proto::UniformQuaternions* uniform_quats);
  ::frame::proto::UniformQuaternions* unsafe_arena_release_uniform_quats();

  // .frame.proto.UniformMatrix4s uniform_mat4s = 18;
  bool has_uniform_mat4s() const;
  private:
  bool _internal_has_uniform_mat4s() const;
  public:
  void clear_uniform_mat4s();
  const ::frame::proto::UniformMatrix4s& uniform_mat4s() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformMatrix4s* release_uniform_mat4s();
  ::frame::proto::UniformMatrix4s* mutable_uniform_mat4s();
  void set_allocated_uniform_mat4s(::frame::proto::UniformMatrix4s* uniform_mat4s);
  private:
  const ::frame::proto::UniformMatrix4s& _internal_uniform_mat4s() const;
  ::frame::proto::UniformMatrix4s* _internal_mutable_uniform_mat4s();
  public:
  void unsafe_arena_set_allocated_uniform_mat4s(
      ::frame::proto::UniformMatrix4s* uniform_mat4s);
  ::frame::proto::UniformMatrix4s* unsafe_arena_release_uniform_mat4s();

  void clear_value_oneof();
  ValueOneofCase value_oneof_case() const;
  // @@protoc_insertion_point(class_scope:frame.proto.Uniform)
 private:
  class _Internal;
  void set_has_uniform_int();
  void set_has_uniform_float();
  void set_has_uniform_float_plugin();
  void set_has_uniform_int_plugin();
  void set_has_uniform_enum();
  void set_has_uniform_vec2();
  void set_has_uniform_vec3();
  void set_has_uniform_vec4();
  void set_has_uniform_quat();
  void set_has_uniform_mat4();
  void set_has_uniform_ints();
  void set_has_uniform_floats();
  void set_has_uniform_vec2s();
  void set_has_uniform_vec3s();
  void set_has_uniform_vec4s();
  void set_has_uniform_quats();
  void set_has_uniform_mat4s();

  inline bool has_value_oneof() const;
  inline void clear_has_value_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union ValueOneofUnion {
      constexpr ValueOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t uniform_int_;
      float uniform_float_;
      ::frame::proto::Plugin* uniform_float_plugin_;
      ::frame::proto::Plugin* uniform_int_plugin_;
      int uniform_enum_;
      ::frame::proto::UniformVector2* uniform_vec2_;
      ::frame::proto::UniformVector3* uniform_vec3_;
      ::frame::proto::UniformVector4* uniform_vec4_;
      ::frame::proto::UniformQuaternion* uniform_quat_;
      ::frame::proto::UniformMatrix4* uniform_mat4_;
      ::frame::proto::UniformInts* uniform_ints_;
      ::frame::proto::UniformFloats* uniform_floats_;
      ::frame::proto::UniformVector2s* uniform_vec2s_;
      ::frame::proto::UniformVector3s* uniform_vec3s_;
      ::frame::proto::UniformVector4s* uniform_vec4s_;
      ::frame::proto::UniformQuaternions* uniform_quats_;
      ::frame::proto::UniformMatrix4s* uniform_mat4s_;
    } value_oneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uniform_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Uniform

// string name = 1;
inline void Uniform::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Uniform::name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Uniform::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.name)
}
inline std::string* Uniform::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.name)
  return _s;
}
inline const std::string& Uniform::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Uniform::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Uniform::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Uniform::release_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.name)
  return _impl_.name_.Release();
}
inline void Uniform::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.name)
}

// int32 uniform_int = 2;
inline bool Uniform::_internal_has_uniform_int() const {
  return value_oneof_case() == kUniformInt;
}
inline bool Uniform::has_uniform_int() const {
  return _internal_has_uniform_int();
}
inline void Uniform::set_has_uniform_int() {
  _impl_._oneof_case_[0] = kUniformInt;
}
inline void Uniform::clear_uniform_int() {
  if (_internal_has_uniform_int()) {
    _impl_.value_oneof_.uniform_int_ = 0;
    clear_has_value_oneof();
  }
}
inline int32_t Uniform::_internal_uniform_int() const {
  if (_internal_has_uniform_int()) {
    return _impl_.value_oneof_.uniform_int_;
  }
  return 0;
}
inline void Uniform::_internal_set_uniform_int(int32_t value) {
  if (!_internal_has_uniform_int()) {
    clear_value_oneof();
    set_has_uniform_int();
  }
  _impl_.value_oneof_.uniform_int_ = value;
}
inline int32_t Uniform::uniform_int() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_int)
  return _internal_uniform_int();
}
inline void Uniform::set_uniform_int(int32_t value) {
  _internal_set_uniform_int(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_int)
}

// float uniform_float = 4;
inline bool Uniform::_internal_has_uniform_float() const {
  return value_oneof_case() == kUniformFloat;
}
inline bool Uniform::has_uniform_float() const {
  return _internal_has_uniform_float();
}
inline void Uniform::set_has_uniform_float() {
  _impl_._oneof_case_[0] = kUniformFloat;
}
inline void Uniform::clear_uniform_float() {
  if (_internal_has_uniform_float()) {
    _impl_.value_oneof_.uniform_float_ = 0;
    clear_has_value_oneof();
  }
}
inline float Uniform::_internal_uniform_float() const {
  if (_internal_has_uniform_float()) {
    return _impl_.value_oneof_.uniform_float_;
  }
  return 0;
}
inline void Uniform::_internal_set_uniform_float(float value) {
  if (!_internal_has_uniform_float()) {
    clear_value_oneof();
    set_has_uniform_float();
  }
  _impl_.value_oneof_.uniform_float_ = value;
}
inline float Uniform::uniform_float() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_float)
  return _internal_uniform_float();
}
inline void Uniform::set_uniform_float(float value) {
  _internal_set_uniform_float(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_float)
}

// .frame.proto.Plugin uniform_float_plugin = 19;
inline bool Uniform::_internal_has_uniform_float_plugin() const {
  return value_oneof_case() == kUniformFloatPlugin;
}
inline bool Uniform::has_uniform_float_plugin() const {
  return _internal_has_uniform_float_plugin();
}
inline void Uniform::set_has_uniform_float_plugin() {
  _impl_._oneof_case_[0] = kUniformFloatPlugin;
}
inline ::frame::proto::Plugin* Uniform::release_uniform_float_plugin() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_float_plugin)
  if (_internal_has_uniform_float_plugin()) {
    clear_has_value_oneof();
    ::frame::proto::Plugin* temp = _impl_.value_oneof_.uniform_float_plugin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_float_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Plugin& Uniform::_internal_uniform_float_plugin() const {
  return _internal_has_uniform_float_plugin()
      ? *_impl_.value_oneof_.uniform_float_plugin_
      : reinterpret_cast< ::frame::proto::Plugin&>(::frame::proto::_Plugin_default_instance_);
}
inline const ::frame::proto::Plugin& Uniform::uniform_float_plugin() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_float_plugin)
  return _internal_uniform_float_plugin();
}
inline ::frame::proto::Plugin* Uniform::unsafe_arena_release_uniform_float_plugin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_float_plugin)
  if (_internal_has_uniform_float_plugin()) {
    clear_has_value_oneof();
    ::frame::proto::Plugin* temp = _impl_.value_oneof_.uniform_float_plugin_;
    _impl_.value_oneof_.uniform_float_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_float_plugin(::frame::proto::Plugin* uniform_float_plugin) {
  clear_value_oneof();
  if (uniform_float_plugin) {
    set_has_uniform_float_plugin();
    _impl_.value_oneof_.uniform_float_plugin_ = uniform_float_plugin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_float_plugin)
}
inline ::frame::proto::Plugin* Uniform::_internal_mutable_uniform_float_plugin() {
  if (!_internal_has_uniform_float_plugin()) {
    clear_value_oneof();
    set_has_uniform_float_plugin();
    _impl_.value_oneof_.uniform_float_plugin_ = CreateMaybeMessage< ::frame::proto::Plugin >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_float_plugin_;
}
inline ::frame::proto::Plugin* Uniform::mutable_uniform_float_plugin() {
  ::frame::proto::Plugin* _msg = _internal_mutable_uniform_float_plugin();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_float_plugin)
  return _msg;
}

// .frame.proto.Plugin uniform_int_plugin = 20;
inline bool Uniform::_internal_has_uniform_int_plugin() const {
  return value_oneof_case() == kUniformIntPlugin;
}
inline bool Uniform::has_uniform_int_plugin() const {
  return _internal_has_uniform_int_plugin();
}
inline void Uniform::set_has_uniform_int_plugin() {
  _impl_._oneof_case_[0] = kUniformIntPlugin;
}
inline ::frame::proto::Plugin* Uniform::release_uniform_int_plugin() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_int_plugin)
  if (_internal_has_uniform_int_plugin()) {
    clear_has_value_oneof();
    ::frame::proto::Plugin* temp = _impl_.value_oneof_.uniform_int_plugin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_int_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Plugin& Uniform::_internal_uniform_int_plugin() const {
  return _internal_has_uniform_int_plugin()
      ? *_impl_.value_oneof_.uniform_int_plugin_
      : reinterpret_cast< ::frame::proto::Plugin&>(::frame::proto::_Plugin_default_instance_);
}
inline const ::frame::proto::Plugin& Uniform::uniform_int_plugin() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_int_plugin)
  return _internal_uniform_int_plugin();
}
inline ::frame::proto::Plugin* Uniform::unsafe_arena_release_uniform_int_plugin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_int_plugin)
  if (_internal_has_uniform_int_plugin()) {
    clear_has_value_oneof();
    ::frame::proto::Plugin* temp = _impl_.value_oneof_.uniform_int_plugin_;
    _impl_.value_oneof_.uniform_int_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_int_plugin(::frame::proto::Plugin* uniform_int_plugin) {
  clear_value_oneof();
  if (uniform_int_plugin) {
    set_has_uniform_int_plugin();
    _impl_.value_oneof_.uniform_int_plugin_ = uniform_int_plugin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_int_plugin)
}
inline ::frame::proto::Plugin* Uniform::_internal_mutable_uniform_int_plugin() {
  if (!_internal_has_uniform_int_plugin()) {
    clear_value_oneof();
    set_has_uniform_int_plugin();
    _impl_.value_oneof_.uniform_int_plugin_ = CreateMaybeMessage< ::frame::proto::Plugin >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_int_plugin_;
}
inline ::frame::proto::Plugin* Uniform::mutable_uniform_int_plugin() {
  ::frame::proto::Plugin* _msg = _internal_mutable_uniform_int_plugin();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_int_plugin)
  return _msg;
}

// .frame.proto.Uniform.UniformEnum uniform_enum = 5;
inline bool Uniform::_internal_has_uniform_enum() const {
  return value_oneof_case() == kUniformEnum;
}
inline bool Uniform::has_uniform_enum() const {
  return _internal_has_uniform_enum();
}
inline void Uniform::set_has_uniform_enum() {
  _impl_._oneof_case_[0] = kUniformEnum;
}
inline void Uniform::clear_uniform_enum() {
  if (_internal_has_uniform_enum()) {
    _impl_.value_oneof_.uniform_enum_ = 0;
    clear_has_value_oneof();
  }
}
inline ::frame::proto::Uniform_UniformEnum Uniform::_internal_uniform_enum() const {
  if (_internal_has_uniform_enum()) {
    return static_cast< ::frame::proto::Uniform_UniformEnum >(_impl_.value_oneof_.uniform_enum_);
  }
  return static_cast< ::frame::proto::Uniform_UniformEnum >(0);
}
inline ::frame::proto::Uniform_UniformEnum Uniform::uniform_enum() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_enum)
  return _internal_uniform_enum();
}
inline void Uniform::_internal_set_uniform_enum(::frame::proto::Uniform_UniformEnum value) {
  if (!_internal_has_uniform_enum()) {
    clear_value_oneof();
    set_has_uniform_enum();
  }
  _impl_.value_oneof_.uniform_enum_ = value;
}
inline void Uniform::set_uniform_enum(::frame::proto::Uniform_UniformEnum value) {
  _internal_set_uniform_enum(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_enum)
}

// .frame.proto.UniformVector2 uniform_vec2 = 6;
inline bool Uniform::_internal_has_uniform_vec2() const {
  return value_oneof_case() == kUniformVec2;
}
inline bool Uniform::has_uniform_vec2() const {
  return _internal_has_uniform_vec2();
}
inline void Uniform::set_has_uniform_vec2() {
  _impl_._oneof_case_[0] = kUniformVec2;
}
inline ::frame::proto::UniformVector2* Uniform::release_uniform_vec2() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec2)
  if (_internal_has_uniform_vec2()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector2* temp = _impl_.value_oneof_.uniform_vec2_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector2& Uniform::_internal_uniform_vec2() const {
  return _internal_has_uniform_vec2()
      ? *_impl_.value_oneof_.uniform_vec2_
      : reinterpret_cast< ::frame::proto::UniformVector2&>(::frame::proto::_UniformVector2_default_instance_);
}
inline const ::frame::proto::UniformVector2& Uniform::uniform_vec2() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec2)
  return _internal_uniform_vec2();
}
inline ::frame::proto::UniformVector2* Uniform::unsafe_arena_release_uniform_vec2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec2)
  if (_internal_has_uniform_vec2()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector2* temp = _impl_.value_oneof_.uniform_vec2_;
    _impl_.value_oneof_.uniform_vec2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec2(::frame::proto::UniformVector2* uniform_vec2) {
  clear_value_oneof();
  if (uniform_vec2) {
    set_has_uniform_vec2();
    _impl_.value_oneof_.uniform_vec2_ = uniform_vec2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec2)
}
inline ::frame::proto::UniformVector2* Uniform::_internal_mutable_uniform_vec2() {
  if (!_internal_has_uniform_vec2()) {
    clear_value_oneof();
    set_has_uniform_vec2();
    _impl_.value_oneof_.uniform_vec2_ = CreateMaybeMessage< ::frame::proto::UniformVector2 >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_vec2_;
}
inline ::frame::proto::UniformVector2* Uniform::mutable_uniform_vec2() {
  ::frame::proto::UniformVector2* _msg = _internal_mutable_uniform_vec2();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec2)
  return _msg;
}

// .frame.proto.UniformVector3 uniform_vec3 = 7;
inline bool Uniform::_internal_has_uniform_vec3() const {
  return value_oneof_case() == kUniformVec3;
}
inline bool Uniform::has_uniform_vec3() const {
  return _internal_has_uniform_vec3();
}
inline void Uniform::set_has_uniform_vec3() {
  _impl_._oneof_case_[0] = kUniformVec3;
}
inline ::frame::proto::UniformVector3* Uniform::release_uniform_vec3() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec3)
  if (_internal_has_uniform_vec3()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector3* temp = _impl_.value_oneof_.uniform_vec3_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector3& Uniform::_internal_uniform_vec3() const {
  return _internal_has_uniform_vec3()
      ? *_impl_.value_oneof_.uniform_vec3_
      : reinterpret_cast< ::frame::proto::UniformVector3&>(::frame::proto::_UniformVector3_default_instance_);
}
inline const ::frame::proto::UniformVector3& Uniform::uniform_vec3() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec3)
  return _internal_uniform_vec3();
}
inline ::frame::proto::UniformVector3* Uniform::unsafe_arena_release_uniform_vec3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec3)
  if (_internal_has_uniform_vec3()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector3* temp = _impl_.value_oneof_.uniform_vec3_;
    _impl_.value_oneof_.uniform_vec3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec3(::frame::proto::UniformVector3* uniform_vec3) {
  clear_value_oneof();
  if (uniform_vec3) {
    set_has_uniform_vec3();
    _impl_.value_oneof_.uniform_vec3_ = uniform_vec3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec3)
}
inline ::frame::proto::UniformVector3* Uniform::_internal_mutable_uniform_vec3() {
  if (!_internal_has_uniform_vec3()) {
    clear_value_oneof();
    set_has_uniform_vec3();
    _impl_.value_oneof_.uniform_vec3_ = CreateMaybeMessage< ::frame::proto::UniformVector3 >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_vec3_;
}
inline ::frame::proto::UniformVector3* Uniform::mutable_uniform_vec3() {
  ::frame::proto::UniformVector3* _msg = _internal_mutable_uniform_vec3();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec3)
  return _msg;
}

// .frame.proto.UniformVector4 uniform_vec4 = 8;
inline bool Uniform::_internal_has_uniform_vec4() const {
  return value_oneof_case() == kUniformVec4;
}
inline bool Uniform::has_uniform_vec4() const {
  return _internal_has_uniform_vec4();
}
inline void Uniform::set_has_uniform_vec4() {
  _impl_._oneof_case_[0] = kUniformVec4;
}
inline ::frame::proto::UniformVector4* Uniform::release_uniform_vec4() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec4)
  if (_internal_has_uniform_vec4()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector4* temp = _impl_.value_oneof_.uniform_vec4_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector4& Uniform::_internal_uniform_vec4() const {
  return _internal_has_uniform_vec4()
      ? *_impl_.value_oneof_.uniform_vec4_
      : reinterpret_cast< ::frame::proto::UniformVector4&>(::frame::proto::_UniformVector4_default_instance_);
}
inline const ::frame::proto::UniformVector4& Uniform::uniform_vec4() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec4)
  return _internal_uniform_vec4();
}
inline ::frame::proto::UniformVector4* Uniform::unsafe_arena_release_uniform_vec4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec4)
  if (_internal_has_uniform_vec4()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector4* temp = _impl_.value_oneof_.uniform_vec4_;
    _impl_.value_oneof_.uniform_vec4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec4(::frame::proto::UniformVector4* uniform_vec4) {
  clear_value_oneof();
  if (uniform_vec4) {
    set_has_uniform_vec4();
    _impl_.value_oneof_.uniform_vec4_ = uniform_vec4;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec4)
}
inline ::frame::proto::UniformVector4* Uniform::_internal_mutable_uniform_vec4() {
  if (!_internal_has_uniform_vec4()) {
    clear_value_oneof();
    set_has_uniform_vec4();
    _impl_.value_oneof_.uniform_vec4_ = CreateMaybeMessage< ::frame::proto::UniformVector4 >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_vec4_;
}
inline ::frame::proto::UniformVector4* Uniform::mutable_uniform_vec4() {
  ::frame::proto::UniformVector4* _msg = _internal_mutable_uniform_vec4();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec4)
  return _msg;
}

// .frame.proto.UniformQuaternion uniform_quat = 9;
inline bool Uniform::_internal_has_uniform_quat() const {
  return value_oneof_case() == kUniformQuat;
}
inline bool Uniform::has_uniform_quat() const {
  return _internal_has_uniform_quat();
}
inline void Uniform::set_has_uniform_quat() {
  _impl_._oneof_case_[0] = kUniformQuat;
}
inline ::frame::proto::UniformQuaternion* Uniform::release_uniform_quat() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_quat)
  if (_internal_has_uniform_quat()) {
    clear_has_value_oneof();
    ::frame::proto::UniformQuaternion* temp = _impl_.value_oneof_.uniform_quat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_quat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformQuaternion& Uniform::_internal_uniform_quat() const {
  return _internal_has_uniform_quat()
      ? *_impl_.value_oneof_.uniform_quat_
      : reinterpret_cast< ::frame::proto::UniformQuaternion&>(::frame::proto::_UniformQuaternion_default_instance_);
}
inline const ::frame::proto::UniformQuaternion& Uniform::uniform_quat() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_quat)
  return _internal_uniform_quat();
}
inline ::frame::proto::UniformQuaternion* Uniform::unsafe_arena_release_uniform_quat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_quat)
  if (_internal_has_uniform_quat()) {
    clear_has_value_oneof();
    ::frame::proto::UniformQuaternion* temp = _impl_.value_oneof_.uniform_quat_;
    _impl_.value_oneof_.uniform_quat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_quat(::frame::proto::UniformQuaternion* uniform_quat) {
  clear_value_oneof();
  if (uniform_quat) {
    set_has_uniform_quat();
    _impl_.value_oneof_.uniform_quat_ = uniform_quat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_quat)
}
inline ::frame::proto::UniformQuaternion* Uniform::_internal_mutable_uniform_quat() {
  if (!_internal_has_uniform_quat()) {
    clear_value_oneof();
    set_has_uniform_quat();
    _impl_.value_oneof_.uniform_quat_ = CreateMaybeMessage< ::frame::proto::UniformQuaternion >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_quat_;
}
inline ::frame::proto::UniformQuaternion* Uniform::mutable_uniform_quat() {
  ::frame::proto::UniformQuaternion* _msg = _internal_mutable_uniform_quat();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_quat)
  return _msg;
}

// .frame.proto.UniformMatrix4 uniform_mat4 = 10;
inline bool Uniform::_internal_has_uniform_mat4() const {
  return value_oneof_case() == kUniformMat4;
}
inline bool Uniform::has_uniform_mat4() const {
  return _internal_has_uniform_mat4();
}
inline void Uniform::set_has_uniform_mat4() {
  _impl_._oneof_case_[0] = kUniformMat4;
}
inline ::frame::proto::UniformMatrix4* Uniform::release_uniform_mat4() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_mat4)
  if (_internal_has_uniform_mat4()) {
    clear_has_value_oneof();
    ::frame::proto::UniformMatrix4* temp = _impl_.value_oneof_.uniform_mat4_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_mat4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformMatrix4& Uniform::_internal_uniform_mat4() const {
  return _internal_has_uniform_mat4()
      ? *_impl_.value_oneof_.uniform_mat4_
      : reinterpret_cast< ::frame::proto::UniformMatrix4&>(::frame::proto::_UniformMatrix4_default_instance_);
}
inline const ::frame::proto::UniformMatrix4& Uniform::uniform_mat4() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_mat4)
  return _internal_uniform_mat4();
}
inline ::frame::proto::UniformMatrix4* Uniform::unsafe_arena_release_uniform_mat4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_mat4)
  if (_internal_has_uniform_mat4()) {
    clear_has_value_oneof();
    ::frame::proto::UniformMatrix4* temp = _impl_.value_oneof_.uniform_mat4_;
    _impl_.value_oneof_.uniform_mat4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_mat4(::frame::proto::UniformMatrix4* uniform_mat4) {
  clear_value_oneof();
  if (uniform_mat4) {
    set_has_uniform_mat4();
    _impl_.value_oneof_.uniform_mat4_ = uniform_mat4;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_mat4)
}
inline ::frame::proto::UniformMatrix4* Uniform::_internal_mutable_uniform_mat4() {
  if (!_internal_has_uniform_mat4()) {
    clear_value_oneof();
    set_has_uniform_mat4();
    _impl_.value_oneof_.uniform_mat4_ = CreateMaybeMessage< ::frame::proto::UniformMatrix4 >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_mat4_;
}
inline ::frame::proto::UniformMatrix4* Uniform::mutable_uniform_mat4() {
  ::frame::proto::UniformMatrix4* _msg = _internal_mutable_uniform_mat4();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_mat4)
  return _msg;
}

// .frame.proto.UniformInts uniform_ints = 11;
inline bool Uniform::_internal_has_uniform_ints() const {
  return value_oneof_case() == kUniformInts;
}
inline bool Uniform::has_uniform_ints() const {
  return _internal_has_uniform_ints();
}
inline void Uniform::set_has_uniform_ints() {
  _impl_._oneof_case_[0] = kUniformInts;
}
inline ::frame::proto::UniformInts* Uniform::release_uniform_ints() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_ints)
  if (_internal_has_uniform_ints()) {
    clear_has_value_oneof();
    ::frame::proto::UniformInts* temp = _impl_.value_oneof_.uniform_ints_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_ints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformInts& Uniform::_internal_uniform_ints() const {
  return _internal_has_uniform_ints()
      ? *_impl_.value_oneof_.uniform_ints_
      : reinterpret_cast< ::frame::proto::UniformInts&>(::frame::proto::_UniformInts_default_instance_);
}
inline const ::frame::proto::UniformInts& Uniform::uniform_ints() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_ints)
  return _internal_uniform_ints();
}
inline ::frame::proto::UniformInts* Uniform::unsafe_arena_release_uniform_ints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_ints)
  if (_internal_has_uniform_ints()) {
    clear_has_value_oneof();
    ::frame::proto::UniformInts* temp = _impl_.value_oneof_.uniform_ints_;
    _impl_.value_oneof_.uniform_ints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_ints(::frame::proto::UniformInts* uniform_ints) {
  clear_value_oneof();
  if (uniform_ints) {
    set_has_uniform_ints();
    _impl_.value_oneof_.uniform_ints_ = uniform_ints;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_ints)
}
inline ::frame::proto::UniformInts* Uniform::_internal_mutable_uniform_ints() {
  if (!_internal_has_uniform_ints()) {
    clear_value_oneof();
    set_has_uniform_ints();
    _impl_.value_oneof_.uniform_ints_ = CreateMaybeMessage< ::frame::proto::UniformInts >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_ints_;
}
inline ::frame::proto::UniformInts* Uniform::mutable_uniform_ints() {
  ::frame::proto::UniformInts* _msg = _internal_mutable_uniform_ints();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_ints)
  return _msg;
}

// .frame.proto.UniformFloats uniform_floats = 13;
inline bool Uniform::_internal_has_uniform_floats() const {
  return value_oneof_case() == kUniformFloats;
}
inline bool Uniform::has_uniform_floats() const {
  return _internal_has_uniform_floats();
}
inline void Uniform::set_has_uniform_floats() {
  _impl_._oneof_case_[0] = kUniformFloats;
}
inline ::frame::proto::UniformFloats* Uniform::release_uniform_floats() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_floats)
  if (_internal_has_uniform_floats()) {
    clear_has_value_oneof();
    ::frame::proto::UniformFloats* temp = _impl_.value_oneof_.uniform_floats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_floats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformFloats& Uniform::_internal_uniform_floats() const {
  return _internal_has_uniform_floats()
      ? *_impl_.value_oneof_.uniform_floats_
      : reinterpret_cast< ::frame::proto::UniformFloats&>(::frame::proto::_UniformFloats_default_instance_);
}
inline const ::frame::proto::UniformFloats& Uniform::uniform_floats() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_floats)
  return _internal_uniform_floats();
}
inline ::frame::proto::UniformFloats* Uniform::unsafe_arena_release_uniform_floats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_floats)
  if (_internal_has_uniform_floats()) {
    clear_has_value_oneof();
    ::frame::proto::UniformFloats* temp = _impl_.value_oneof_.uniform_floats_;
    _impl_.value_oneof_.uniform_floats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_floats(::frame::proto::UniformFloats* uniform_floats) {
  clear_value_oneof();
  if (uniform_floats) {
    set_has_uniform_floats();
    _impl_.value_oneof_.uniform_floats_ = uniform_floats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_floats)
}
inline ::frame::proto::UniformFloats* Uniform::_internal_mutable_uniform_floats() {
  if (!_internal_has_uniform_floats()) {
    clear_value_oneof();
    set_has_uniform_floats();
    _impl_.value_oneof_.uniform_floats_ = CreateMaybeMessage< ::frame::proto::UniformFloats >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_floats_;
}
inline ::frame::proto::UniformFloats* Uniform::mutable_uniform_floats() {
  ::frame::proto::UniformFloats* _msg = _internal_mutable_uniform_floats();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_floats)
  return _msg;
}

// .frame.proto.UniformVector2s uniform_vec2s = 14;
inline bool Uniform::_internal_has_uniform_vec2s() const {
  return value_oneof_case() == kUniformVec2S;
}
inline bool Uniform::has_uniform_vec2s() const {
  return _internal_has_uniform_vec2s();
}
inline void Uniform::set_has_uniform_vec2s() {
  _impl_._oneof_case_[0] = kUniformVec2S;
}
inline ::frame::proto::UniformVector2s* Uniform::release_uniform_vec2s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec2s)
  if (_internal_has_uniform_vec2s()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector2s* temp = _impl_.value_oneof_.uniform_vec2s_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec2s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector2s& Uniform::_internal_uniform_vec2s() const {
  return _internal_has_uniform_vec2s()
      ? *_impl_.value_oneof_.uniform_vec2s_
      : reinterpret_cast< ::frame::proto::UniformVector2s&>(::frame::proto::_UniformVector2s_default_instance_);
}
inline const ::frame::proto::UniformVector2s& Uniform::uniform_vec2s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec2s)
  return _internal_uniform_vec2s();
}
inline ::frame::proto::UniformVector2s* Uniform::unsafe_arena_release_uniform_vec2s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec2s)
  if (_internal_has_uniform_vec2s()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector2s* temp = _impl_.value_oneof_.uniform_vec2s_;
    _impl_.value_oneof_.uniform_vec2s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec2s(::frame::proto::UniformVector2s* uniform_vec2s) {
  clear_value_oneof();
  if (uniform_vec2s) {
    set_has_uniform_vec2s();
    _impl_.value_oneof_.uniform_vec2s_ = uniform_vec2s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec2s)
}
inline ::frame::proto::UniformVector2s* Uniform::_internal_mutable_uniform_vec2s() {
  if (!_internal_has_uniform_vec2s()) {
    clear_value_oneof();
    set_has_uniform_vec2s();
    _impl_.value_oneof_.uniform_vec2s_ = CreateMaybeMessage< ::frame::proto::UniformVector2s >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_vec2s_;
}
inline ::frame::proto::UniformVector2s* Uniform::mutable_uniform_vec2s() {
  ::frame::proto::UniformVector2s* _msg = _internal_mutable_uniform_vec2s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec2s)
  return _msg;
}

// .frame.proto.UniformVector3s uniform_vec3s = 15;
inline bool Uniform::_internal_has_uniform_vec3s() const {
  return value_oneof_case() == kUniformVec3S;
}
inline bool Uniform::has_uniform_vec3s() const {
  return _internal_has_uniform_vec3s();
}
inline void Uniform::set_has_uniform_vec3s() {
  _impl_._oneof_case_[0] = kUniformVec3S;
}
inline ::frame::proto::UniformVector3s* Uniform::release_uniform_vec3s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec3s)
  if (_internal_has_uniform_vec3s()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector3s* temp = _impl_.value_oneof_.uniform_vec3s_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector3s& Uniform::_internal_uniform_vec3s() const {
  return _internal_has_uniform_vec3s()
      ? *_impl_.value_oneof_.uniform_vec3s_
      : reinterpret_cast< ::frame::proto::UniformVector3s&>(::frame::proto::_UniformVector3s_default_instance_);
}
inline const ::frame::proto::UniformVector3s& Uniform::uniform_vec3s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec3s)
  return _internal_uniform_vec3s();
}
inline ::frame::proto::UniformVector3s* Uniform::unsafe_arena_release_uniform_vec3s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec3s)
  if (_internal_has_uniform_vec3s()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector3s* temp = _impl_.value_oneof_.uniform_vec3s_;
    _impl_.value_oneof_.uniform_vec3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec3s(::frame::proto::UniformVector3s* uniform_vec3s) {
  clear_value_oneof();
  if (uniform_vec3s) {
    set_has_uniform_vec3s();
    _impl_.value_oneof_.uniform_vec3s_ = uniform_vec3s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec3s)
}
inline ::frame::proto::UniformVector3s* Uniform::_internal_mutable_uniform_vec3s() {
  if (!_internal_has_uniform_vec3s()) {
    clear_value_oneof();
    set_has_uniform_vec3s();
    _impl_.value_oneof_.uniform_vec3s_ = CreateMaybeMessage< ::frame::proto::UniformVector3s >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_vec3s_;
}
inline ::frame::proto::UniformVector3s* Uniform::mutable_uniform_vec3s() {
  ::frame::proto::UniformVector3s* _msg = _internal_mutable_uniform_vec3s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec3s)
  return _msg;
}

// .frame.proto.UniformVector4s uniform_vec4s = 16;
inline bool Uniform::_internal_has_uniform_vec4s() const {
  return value_oneof_case() == kUniformVec4S;
}
inline bool Uniform::has_uniform_vec4s() const {
  return _internal_has_uniform_vec4s();
}
inline void Uniform::set_has_uniform_vec4s() {
  _impl_._oneof_case_[0] = kUniformVec4S;
}
inline ::frame::proto::UniformVector4s* Uniform::release_uniform_vec4s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec4s)
  if (_internal_has_uniform_vec4s()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector4s* temp = _impl_.value_oneof_.uniform_vec4s_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector4s& Uniform::_internal_uniform_vec4s() const {
  return _internal_has_uniform_vec4s()
      ? *_impl_.value_oneof_.uniform_vec4s_
      : reinterpret_cast< ::frame::proto::UniformVector4s&>(::frame::proto::_UniformVector4s_default_instance_);
}
inline const ::frame::proto::UniformVector4s& Uniform::uniform_vec4s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec4s)
  return _internal_uniform_vec4s();
}
inline ::frame::proto::UniformVector4s* Uniform::unsafe_arena_release_uniform_vec4s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec4s)
  if (_internal_has_uniform_vec4s()) {
    clear_has_value_oneof();
    ::frame::proto::UniformVector4s* temp = _impl_.value_oneof_.uniform_vec4s_;
    _impl_.value_oneof_.uniform_vec4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec4s(::frame::proto::UniformVector4s* uniform_vec4s) {
  clear_value_oneof();
  if (uniform_vec4s) {
    set_has_uniform_vec4s();
    _impl_.value_oneof_.uniform_vec4s_ = uniform_vec4s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec4s)
}
inline ::frame::proto::UniformVector4s* Uniform::_internal_mutable_uniform_vec4s() {
  if (!_internal_has_uniform_vec4s()) {
    clear_value_oneof();
    set_has_uniform_vec4s();
    _impl_.value_oneof_.uniform_vec4s_ = CreateMaybeMessage< ::frame::proto::UniformVector4s >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_vec4s_;
}
inline ::frame::proto::UniformVector4s* Uniform::mutable_uniform_vec4s() {
  ::frame::proto::UniformVector4s* _msg = _internal_mutable_uniform_vec4s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec4s)
  return _msg;
}

// .frame.proto.UniformQuaternions uniform_quats = 17;
inline bool Uniform::_internal_has_uniform_quats() const {
  return value_oneof_case() == kUniformQuats;
}
inline bool Uniform::has_uniform_quats() const {
  return _internal_has_uniform_quats();
}
inline void Uniform::set_has_uniform_quats() {
  _impl_._oneof_case_[0] = kUniformQuats;
}
inline ::frame::proto::UniformQuaternions* Uniform::release_uniform_quats() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_quats)
  if (_internal_has_uniform_quats()) {
    clear_has_value_oneof();
    ::frame::proto::UniformQuaternions* temp = _impl_.value_oneof_.uniform_quats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_quats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformQuaternions& Uniform::_internal_uniform_quats() const {
  return _internal_has_uniform_quats()
      ? *_impl_.value_oneof_.uniform_quats_
      : reinterpret_cast< ::frame::proto::UniformQuaternions&>(::frame::proto::_UniformQuaternions_default_instance_);
}
inline const ::frame::proto::UniformQuaternions& Uniform::uniform_quats() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_quats)
  return _internal_uniform_quats();
}
inline ::frame::proto::UniformQuaternions* Uniform::unsafe_arena_release_uniform_quats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_quats)
  if (_internal_has_uniform_quats()) {
    clear_has_value_oneof();
    ::frame::proto::UniformQuaternions* temp = _impl_.value_oneof_.uniform_quats_;
    _impl_.value_oneof_.uniform_quats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_quats(::frame::proto::UniformQuaternions* uniform_quats) {
  clear_value_oneof();
  if (uniform_quats) {
    set_has_uniform_quats();
    _impl_.value_oneof_.uniform_quats_ = uniform_quats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_quats)
}
inline ::frame::proto::UniformQuaternions* Uniform::_internal_mutable_uniform_quats() {
  if (!_internal_has_uniform_quats()) {
    clear_value_oneof();
    set_has_uniform_quats();
    _impl_.value_oneof_.uniform_quats_ = CreateMaybeMessage< ::frame::proto::UniformQuaternions >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_quats_;
}
inline ::frame::proto::UniformQuaternions* Uniform::mutable_uniform_quats() {
  ::frame::proto::UniformQuaternions* _msg = _internal_mutable_uniform_quats();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_quats)
  return _msg;
}

// .frame.proto.UniformMatrix4s uniform_mat4s = 18;
inline bool Uniform::_internal_has_uniform_mat4s() const {
  return value_oneof_case() == kUniformMat4S;
}
inline bool Uniform::has_uniform_mat4s() const {
  return _internal_has_uniform_mat4s();
}
inline void Uniform::set_has_uniform_mat4s() {
  _impl_._oneof_case_[0] = kUniformMat4S;
}
inline ::frame::proto::UniformMatrix4s* Uniform::release_uniform_mat4s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_mat4s)
  if (_internal_has_uniform_mat4s()) {
    clear_has_value_oneof();
    ::frame::proto::UniformMatrix4s* temp = _impl_.value_oneof_.uniform_mat4s_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_mat4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformMatrix4s& Uniform::_internal_uniform_mat4s() const {
  return _internal_has_uniform_mat4s()
      ? *_impl_.value_oneof_.uniform_mat4s_
      : reinterpret_cast< ::frame::proto::UniformMatrix4s&>(::frame::proto::_UniformMatrix4s_default_instance_);
}
inline const ::frame::proto::UniformMatrix4s& Uniform::uniform_mat4s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_mat4s)
  return _internal_uniform_mat4s();
}
inline ::frame::proto::UniformMatrix4s* Uniform::unsafe_arena_release_uniform_mat4s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_mat4s)
  if (_internal_has_uniform_mat4s()) {
    clear_has_value_oneof();
    ::frame::proto::UniformMatrix4s* temp = _impl_.value_oneof_.uniform_mat4s_;
    _impl_.value_oneof_.uniform_mat4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_mat4s(::frame::proto::UniformMatrix4s* uniform_mat4s) {
  clear_value_oneof();
  if (uniform_mat4s) {
    set_has_uniform_mat4s();
    _impl_.value_oneof_.uniform_mat4s_ = uniform_mat4s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_mat4s)
}
inline ::frame::proto::UniformMatrix4s* Uniform::_internal_mutable_uniform_mat4s() {
  if (!_internal_has_uniform_mat4s()) {
    clear_value_oneof();
    set_has_uniform_mat4s();
    _impl_.value_oneof_.uniform_mat4s_ = CreateMaybeMessage< ::frame::proto::UniformMatrix4s >(GetArenaForAllocation());
  }
  return _impl_.value_oneof_.uniform_mat4s_;
}
inline ::frame::proto::UniformMatrix4s* Uniform::mutable_uniform_mat4s() {
  ::frame::proto::UniformMatrix4s* _msg = _internal_mutable_uniform_mat4s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_mat4s)
  return _msg;
}

inline bool Uniform::has_value_oneof() const {
  return value_oneof_case() != VALUE_ONEOF_NOT_SET;
}
inline void Uniform::clear_has_value_oneof() {
  _impl_._oneof_case_[0] = VALUE_ONEOF_NOT_SET;
}
inline Uniform::ValueOneofCase Uniform::value_oneof_case() const {
  return Uniform::ValueOneofCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frame::proto::Uniform_UniformEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::Uniform_UniformEnum>() {
  return ::frame::proto::Uniform_UniformEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_uniform_2eproto

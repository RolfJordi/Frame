#pragma once

#include <mutex>
#include <spdlog/sinks/base_sink.h>
#include <string>

namespace frame::gui
{

/**
 * @brief A sink for spdlog that stores log messages in a vector of strings.
 *
 * This sink is useful for testing and debugging, as it allows to check the
 * log messages that have been generated by the application.
 *
 * The sink stores the log messages in a vector of strings, which can be
 * accessed using the GetLogs() method. The logs are stored in the order they
 * were generated, and can be cleared using the ClearLogs() method.
 *
 * The sink is thread safe, and can be used with multiple threads.
 */
class GuiLoggerSink : public spdlog::sinks::base_sink<std::mutex>
{
  protected:
    void sink_it_(const spdlog::details::log_msg& msg) override
    {
        // log_msg is a struct containing the log entry info like level,
        // timestamp, thread id etc. msg.raw contains pre formatted log

        // If needed (very likely but not mandatory), the sink formats the
        // message before sending it to its final desination:
        spdlog::memory_buf_t formatted;
        spdlog::sinks::base_sink<std::mutex>::formatter_->format(
            msg, formatted);
        std::string formatted_message(msg.payload.begin(), msg.payload.end());
		logs.push_back(std::move(formatted_message));
    }
    void flush_() override
    {
    }

  public:
    /// @brief Get the logs that have been generated.
    const std::vector<std::string>& GetLogs() const
    {
        return logs;
    }
    /// @brief Clear the logs that have been generated.
    void ClearLogs()
    {
        logs.clear();
    }

  private:
    std::vector<std::string> logs;
};

} // namespace frame::gui.

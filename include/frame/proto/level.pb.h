// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: level.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_level_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_level_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "texture.pb.h"
#include "program.pb.h"
#include "scene.pb.h"
#include "material.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_level_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_level_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_level_2eproto;
namespace frame {
namespace proto {
class Level;
struct LevelDefaultTypeInternal;
extern LevelDefaultTypeInternal _Level_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::Level* Arena::CreateMaybeMessage<::frame::proto::Level>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

// ===================================================================

class Level final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Level) */ {
 public:
  inline Level() : Level(nullptr) {}
  ~Level() override;
  explicit PROTOBUF_CONSTEXPR Level(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Level(const Level& from);
  Level(Level&& from) noexcept
    : Level() {
    *this = ::std::move(from);
  }

  inline Level& operator=(const Level& from) {
    CopyFrom(from);
    return *this;
  }
  inline Level& operator=(Level&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Level& default_instance() {
    return *internal_default_instance();
  }
  static inline const Level* internal_default_instance() {
    return reinterpret_cast<const Level*>(
               &_Level_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Level& a, Level& b) {
    a.Swap(&b);
  }
  inline void Swap(Level* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Level* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Level* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Level>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Level& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Level& from) {
    Level::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Level* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Level";
  }
  protected:
  explicit Level(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTexturesFieldNumber = 5,
    kProgramsFieldNumber = 6,
    kMaterialsFieldNumber = 8,
    kNameFieldNumber = 1,
    kDefaultTextureNameFieldNumber = 2,
    kSceneTreeFieldNumber = 7,
  };
  // repeated .frame.proto.Texture textures = 5;
  int textures_size() const;
  private:
  int _internal_textures_size() const;
  public:
  void clear_textures();
  ::frame::proto::Texture* mutable_textures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture >*
      mutable_textures();
  private:
  const ::frame::proto::Texture& _internal_textures(int index) const;
  ::frame::proto::Texture* _internal_add_textures();
  public:
  const ::frame::proto::Texture& textures(int index) const;
  ::frame::proto::Texture* add_textures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture >&
      textures() const;

  // repeated .frame.proto.Program programs = 6;
  int programs_size() const;
  private:
  int _internal_programs_size() const;
  public:
  void clear_programs();
  ::frame::proto::Program* mutable_programs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Program >*
      mutable_programs();
  private:
  const ::frame::proto::Program& _internal_programs(int index) const;
  ::frame::proto::Program* _internal_add_programs();
  public:
  const ::frame::proto::Program& programs(int index) const;
  ::frame::proto::Program* add_programs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Program >&
      programs() const;

  // repeated .frame.proto.Material materials = 8;
  int materials_size() const;
  private:
  int _internal_materials_size() const;
  public:
  void clear_materials();
  ::frame::proto::Material* mutable_materials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Material >*
      mutable_materials();
  private:
  const ::frame::proto::Material& _internal_materials(int index) const;
  ::frame::proto::Material* _internal_add_materials();
  public:
  const ::frame::proto::Material& materials(int index) const;
  ::frame::proto::Material* add_materials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Material >&
      materials() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string default_texture_name = 2;
  void clear_default_texture_name();
  const std::string& default_texture_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_texture_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_texture_name();
  PROTOBUF_NODISCARD std::string* release_default_texture_name();
  void set_allocated_default_texture_name(std::string* default_texture_name);
  private:
  const std::string& _internal_default_texture_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_texture_name(const std::string& value);
  std::string* _internal_mutable_default_texture_name();
  public:

  // .frame.proto.SceneTree scene_tree = 7;
  bool has_scene_tree() const;
  private:
  bool _internal_has_scene_tree() const;
  public:
  void clear_scene_tree();
  const ::frame::proto::SceneTree& scene_tree() const;
  PROTOBUF_NODISCARD ::frame::proto::SceneTree* release_scene_tree();
  ::frame::proto::SceneTree* mutable_scene_tree();
  void set_allocated_scene_tree(::frame::proto::SceneTree* scene_tree);
  private:
  const ::frame::proto::SceneTree& _internal_scene_tree() const;
  ::frame::proto::SceneTree* _internal_mutable_scene_tree();
  public:
  void unsafe_arena_set_allocated_scene_tree(
      ::frame::proto::SceneTree* scene_tree);
  ::frame::proto::SceneTree* unsafe_arena_release_scene_tree();

  // @@protoc_insertion_point(class_scope:frame.proto.Level)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture > textures_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Program > programs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Material > materials_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_texture_name_;
    ::frame::proto::SceneTree* scene_tree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_level_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Level

// string name = 1;
inline void Level::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Level::name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Level.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Level::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Level.name)
}
inline std::string* Level::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.name)
  return _s;
}
inline const std::string& Level::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Level::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Level::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Level::release_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Level.name)
  return _impl_.name_.Release();
}
inline void Level::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Level.name)
}

// string default_texture_name = 2;
inline void Level::clear_default_texture_name() {
  _impl_.default_texture_name_.ClearToEmpty();
}
inline const std::string& Level::default_texture_name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Level.default_texture_name)
  return _internal_default_texture_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Level::set_default_texture_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.default_texture_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Level.default_texture_name)
}
inline std::string* Level::mutable_default_texture_name() {
  std::string* _s = _internal_mutable_default_texture_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.default_texture_name)
  return _s;
}
inline const std::string& Level::_internal_default_texture_name() const {
  return _impl_.default_texture_name_.Get();
}
inline void Level::_internal_set_default_texture_name(const std::string& value) {
  
  _impl_.default_texture_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Level::_internal_mutable_default_texture_name() {
  
  return _impl_.default_texture_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Level::release_default_texture_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Level.default_texture_name)
  return _impl_.default_texture_name_.Release();
}
inline void Level::set_allocated_default_texture_name(std::string* default_texture_name) {
  if (default_texture_name != nullptr) {
    
  } else {
    
  }
  _impl_.default_texture_name_.SetAllocated(default_texture_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_texture_name_.IsDefault()) {
    _impl_.default_texture_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Level.default_texture_name)
}

// repeated .frame.proto.Texture textures = 5;
inline int Level::_internal_textures_size() const {
  return _impl_.textures_.size();
}
inline int Level::textures_size() const {
  return _internal_textures_size();
}
inline ::frame::proto::Texture* Level::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.textures)
  return _impl_.textures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture >*
Level::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Level.textures)
  return &_impl_.textures_;
}
inline const ::frame::proto::Texture& Level::_internal_textures(int index) const {
  return _impl_.textures_.Get(index);
}
inline const ::frame::proto::Texture& Level::textures(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Level.textures)
  return _internal_textures(index);
}
inline ::frame::proto::Texture* Level::_internal_add_textures() {
  return _impl_.textures_.Add();
}
inline ::frame::proto::Texture* Level::add_textures() {
  ::frame::proto::Texture* _add = _internal_add_textures();
  // @@protoc_insertion_point(field_add:frame.proto.Level.textures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture >&
Level::textures() const {
  // @@protoc_insertion_point(field_list:frame.proto.Level.textures)
  return _impl_.textures_;
}

// repeated .frame.proto.Program programs = 6;
inline int Level::_internal_programs_size() const {
  return _impl_.programs_.size();
}
inline int Level::programs_size() const {
  return _internal_programs_size();
}
inline ::frame::proto::Program* Level::mutable_programs(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.programs)
  return _impl_.programs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Program >*
Level::mutable_programs() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Level.programs)
  return &_impl_.programs_;
}
inline const ::frame::proto::Program& Level::_internal_programs(int index) const {
  return _impl_.programs_.Get(index);
}
inline const ::frame::proto::Program& Level::programs(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Level.programs)
  return _internal_programs(index);
}
inline ::frame::proto::Program* Level::_internal_add_programs() {
  return _impl_.programs_.Add();
}
inline ::frame::proto::Program* Level::add_programs() {
  ::frame::proto::Program* _add = _internal_add_programs();
  // @@protoc_insertion_point(field_add:frame.proto.Level.programs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Program >&
Level::programs() const {
  // @@protoc_insertion_point(field_list:frame.proto.Level.programs)
  return _impl_.programs_;
}

// .frame.proto.SceneTree scene_tree = 7;
inline bool Level::_internal_has_scene_tree() const {
  return this != internal_default_instance() && _impl_.scene_tree_ != nullptr;
}
inline bool Level::has_scene_tree() const {
  return _internal_has_scene_tree();
}
inline const ::frame::proto::SceneTree& Level::_internal_scene_tree() const {
  const ::frame::proto::SceneTree* p = _impl_.scene_tree_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::SceneTree&>(
      ::frame::proto::_SceneTree_default_instance_);
}
inline const ::frame::proto::SceneTree& Level::scene_tree() const {
  // @@protoc_insertion_point(field_get:frame.proto.Level.scene_tree)
  return _internal_scene_tree();
}
inline void Level::unsafe_arena_set_allocated_scene_tree(
    ::frame::proto::SceneTree* scene_tree) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scene_tree_);
  }
  _impl_.scene_tree_ = scene_tree;
  if (scene_tree) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Level.scene_tree)
}
inline ::frame::proto::SceneTree* Level::release_scene_tree() {
  
  ::frame::proto::SceneTree* temp = _impl_.scene_tree_;
  _impl_.scene_tree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frame::proto::SceneTree* Level::unsafe_arena_release_scene_tree() {
  // @@protoc_insertion_point(field_release:frame.proto.Level.scene_tree)
  
  ::frame::proto::SceneTree* temp = _impl_.scene_tree_;
  _impl_.scene_tree_ = nullptr;
  return temp;
}
inline ::frame::proto::SceneTree* Level::_internal_mutable_scene_tree() {
  
  if (_impl_.scene_tree_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::SceneTree>(GetArenaForAllocation());
    _impl_.scene_tree_ = p;
  }
  return _impl_.scene_tree_;
}
inline ::frame::proto::SceneTree* Level::mutable_scene_tree() {
  ::frame::proto::SceneTree* _msg = _internal_mutable_scene_tree();
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.scene_tree)
  return _msg;
}
inline void Level::set_allocated_scene_tree(::frame::proto::SceneTree* scene_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scene_tree_);
  }
  if (scene_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scene_tree));
    if (message_arena != submessage_arena) {
      scene_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene_tree, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scene_tree_ = scene_tree;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Level.scene_tree)
}

// repeated .frame.proto.Material materials = 8;
inline int Level::_internal_materials_size() const {
  return _impl_.materials_.size();
}
inline int Level::materials_size() const {
  return _internal_materials_size();
}
inline ::frame::proto::Material* Level::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.materials)
  return _impl_.materials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Material >*
Level::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Level.materials)
  return &_impl_.materials_;
}
inline const ::frame::proto::Material& Level::_internal_materials(int index) const {
  return _impl_.materials_.Get(index);
}
inline const ::frame::proto::Material& Level::materials(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Level.materials)
  return _internal_materials(index);
}
inline ::frame::proto::Material* Level::_internal_add_materials() {
  return _impl_.materials_.Add();
}
inline ::frame::proto::Material* Level::add_materials() {
  ::frame::proto::Material* _add = _internal_add_materials();
  // @@protoc_insertion_point(field_add:frame.proto.Level.materials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Material >&
Level::materials() const {
  // @@protoc_insertion_point(field_list:frame.proto.Level.materials)
  return _impl_.materials_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_level_2eproto

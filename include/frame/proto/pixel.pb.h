// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pixel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pixel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pixel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pixel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pixel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pixel_2eproto;
namespace frame {
namespace proto {
class CleanBuffer;
struct CleanBufferDefaultTypeInternal;
extern CleanBufferDefaultTypeInternal _CleanBuffer_default_instance_;
class PixelDepthComponent;
struct PixelDepthComponentDefaultTypeInternal;
extern PixelDepthComponentDefaultTypeInternal _PixelDepthComponent_default_instance_;
class PixelElementSize;
struct PixelElementSizeDefaultTypeInternal;
extern PixelElementSizeDefaultTypeInternal _PixelElementSize_default_instance_;
class PixelStructure;
struct PixelStructureDefaultTypeInternal;
extern PixelStructureDefaultTypeInternal _PixelStructure_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::CleanBuffer* Arena::CreateMaybeMessage<::frame::proto::CleanBuffer>(Arena*);
template<> ::frame::proto::PixelDepthComponent* Arena::CreateMaybeMessage<::frame::proto::PixelDepthComponent>(Arena*);
template<> ::frame::proto::PixelElementSize* Arena::CreateMaybeMessage<::frame::proto::PixelElementSize>(Arena*);
template<> ::frame::proto::PixelStructure* Arena::CreateMaybeMessage<::frame::proto::PixelStructure>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

enum CleanBuffer_Enum : int {
  CleanBuffer_Enum_INVALID = 0,
  CleanBuffer_Enum_CLEAR_COLOR = 1,
  CleanBuffer_Enum_CLEAR_DEPTH = 2,
  CleanBuffer_Enum_CleanBuffer_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CleanBuffer_Enum_CleanBuffer_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CleanBuffer_Enum_IsValid(int value);
constexpr CleanBuffer_Enum CleanBuffer_Enum_Enum_MIN = CleanBuffer_Enum_INVALID;
constexpr CleanBuffer_Enum CleanBuffer_Enum_Enum_MAX = CleanBuffer_Enum_CLEAR_DEPTH;
constexpr int CleanBuffer_Enum_Enum_ARRAYSIZE = CleanBuffer_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CleanBuffer_Enum_descriptor();
template<typename T>
inline const std::string& CleanBuffer_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CleanBuffer_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CleanBuffer_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CleanBuffer_Enum_descriptor(), enum_t_value);
}
inline bool CleanBuffer_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CleanBuffer_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CleanBuffer_Enum>(
    CleanBuffer_Enum_descriptor(), name, value);
}
enum PixelElementSize_Enum : int {
  PixelElementSize_Enum_INVALID = 0,
  PixelElementSize_Enum_BYTE = 1,
  PixelElementSize_Enum_SHORT = 2,
  PixelElementSize_Enum_HALF = 3,
  PixelElementSize_Enum_FLOAT = 4,
  PixelElementSize_Enum_PixelElementSize_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PixelElementSize_Enum_PixelElementSize_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PixelElementSize_Enum_IsValid(int value);
constexpr PixelElementSize_Enum PixelElementSize_Enum_Enum_MIN = PixelElementSize_Enum_INVALID;
constexpr PixelElementSize_Enum PixelElementSize_Enum_Enum_MAX = PixelElementSize_Enum_FLOAT;
constexpr int PixelElementSize_Enum_Enum_ARRAYSIZE = PixelElementSize_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PixelElementSize_Enum_descriptor();
template<typename T>
inline const std::string& PixelElementSize_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PixelElementSize_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PixelElementSize_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PixelElementSize_Enum_descriptor(), enum_t_value);
}
inline bool PixelElementSize_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PixelElementSize_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PixelElementSize_Enum>(
    PixelElementSize_Enum_descriptor(), name, value);
}
enum PixelStructure_Enum : int {
  PixelStructure_Enum_INVALID = 0,
  PixelStructure_Enum_GREY = 1,
  PixelStructure_Enum_GREY_ALPHA = 2,
  PixelStructure_Enum_RGB = 3,
  PixelStructure_Enum_RGB_ALPHA = 4,
  PixelStructure_Enum_BGR = 5,
  PixelStructure_Enum_BGR_ALPHA = 6,
  PixelStructure_Enum_PixelStructure_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PixelStructure_Enum_PixelStructure_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PixelStructure_Enum_IsValid(int value);
constexpr PixelStructure_Enum PixelStructure_Enum_Enum_MIN = PixelStructure_Enum_INVALID;
constexpr PixelStructure_Enum PixelStructure_Enum_Enum_MAX = PixelStructure_Enum_BGR_ALPHA;
constexpr int PixelStructure_Enum_Enum_ARRAYSIZE = PixelStructure_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PixelStructure_Enum_descriptor();
template<typename T>
inline const std::string& PixelStructure_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PixelStructure_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PixelStructure_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PixelStructure_Enum_descriptor(), enum_t_value);
}
inline bool PixelStructure_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PixelStructure_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PixelStructure_Enum>(
    PixelStructure_Enum_descriptor(), name, value);
}
enum PixelDepthComponent_Enum : int {
  PixelDepthComponent_Enum_INVALID = 0,
  PixelDepthComponent_Enum_DEPTH_COMPONENT8 = 1,
  PixelDepthComponent_Enum_DEPTH_COMPONENT16 = 2,
  PixelDepthComponent_Enum_DEPTH_COMPONENT24 = 3,
  PixelDepthComponent_Enum_DEPTH_COMPONENT32 = 4,
  PixelDepthComponent_Enum_PixelDepthComponent_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PixelDepthComponent_Enum_PixelDepthComponent_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PixelDepthComponent_Enum_IsValid(int value);
constexpr PixelDepthComponent_Enum PixelDepthComponent_Enum_Enum_MIN = PixelDepthComponent_Enum_INVALID;
constexpr PixelDepthComponent_Enum PixelDepthComponent_Enum_Enum_MAX = PixelDepthComponent_Enum_DEPTH_COMPONENT32;
constexpr int PixelDepthComponent_Enum_Enum_ARRAYSIZE = PixelDepthComponent_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PixelDepthComponent_Enum_descriptor();
template<typename T>
inline const std::string& PixelDepthComponent_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PixelDepthComponent_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PixelDepthComponent_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PixelDepthComponent_Enum_descriptor(), enum_t_value);
}
inline bool PixelDepthComponent_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PixelDepthComponent_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PixelDepthComponent_Enum>(
    PixelDepthComponent_Enum_descriptor(), name, value);
}
// ===================================================================

class CleanBuffer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.CleanBuffer) */ {
 public:
  inline CleanBuffer() : CleanBuffer(nullptr) {}
  ~CleanBuffer() override;
  explicit PROTOBUF_CONSTEXPR CleanBuffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CleanBuffer(const CleanBuffer& from);
  CleanBuffer(CleanBuffer&& from) noexcept
    : CleanBuffer() {
    *this = ::std::move(from);
  }

  inline CleanBuffer& operator=(const CleanBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanBuffer& operator=(CleanBuffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CleanBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CleanBuffer* internal_default_instance() {
    return reinterpret_cast<const CleanBuffer*>(
               &_CleanBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CleanBuffer& a, CleanBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanBuffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CleanBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CleanBuffer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CleanBuffer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CleanBuffer& from) {
    CleanBuffer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanBuffer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.CleanBuffer";
  }
  protected:
  explicit CleanBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CleanBuffer_Enum Enum;
  static constexpr Enum INVALID =
    CleanBuffer_Enum_INVALID;
  static constexpr Enum CLEAR_COLOR =
    CleanBuffer_Enum_CLEAR_COLOR;
  static constexpr Enum CLEAR_DEPTH =
    CleanBuffer_Enum_CLEAR_DEPTH;
  static inline bool Enum_IsValid(int value) {
    return CleanBuffer_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    CleanBuffer_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    CleanBuffer_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    CleanBuffer_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return CleanBuffer_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return CleanBuffer_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return CleanBuffer_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .frame.proto.CleanBuffer.Enum values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::frame::proto::CleanBuffer_Enum _internal_values(int index) const;
  void _internal_add_values(::frame::proto::CleanBuffer_Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_values();
  public:
  ::frame::proto::CleanBuffer_Enum values(int index) const;
  void set_values(int index, ::frame::proto::CleanBuffer_Enum value);
  void add_values(::frame::proto::CleanBuffer_Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_values();

  // @@protoc_insertion_point(class_scope:frame.proto.CleanBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> values_;
    mutable std::atomic<int> _values_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pixel_2eproto;
};
// -------------------------------------------------------------------

class PixelElementSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.PixelElementSize) */ {
 public:
  inline PixelElementSize() : PixelElementSize(nullptr) {}
  ~PixelElementSize() override;
  explicit PROTOBUF_CONSTEXPR PixelElementSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PixelElementSize(const PixelElementSize& from);
  PixelElementSize(PixelElementSize&& from) noexcept
    : PixelElementSize() {
    *this = ::std::move(from);
  }

  inline PixelElementSize& operator=(const PixelElementSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline PixelElementSize& operator=(PixelElementSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PixelElementSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelElementSize* internal_default_instance() {
    return reinterpret_cast<const PixelElementSize*>(
               &_PixelElementSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PixelElementSize& a, PixelElementSize& b) {
    a.Swap(&b);
  }
  inline void Swap(PixelElementSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelElementSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelElementSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PixelElementSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PixelElementSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PixelElementSize& from) {
    PixelElementSize::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PixelElementSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.PixelElementSize";
  }
  protected:
  explicit PixelElementSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PixelElementSize_Enum Enum;
  static constexpr Enum INVALID =
    PixelElementSize_Enum_INVALID;
  static constexpr Enum BYTE =
    PixelElementSize_Enum_BYTE;
  static constexpr Enum SHORT =
    PixelElementSize_Enum_SHORT;
  static constexpr Enum HALF =
    PixelElementSize_Enum_HALF;
  static constexpr Enum FLOAT =
    PixelElementSize_Enum_FLOAT;
  static inline bool Enum_IsValid(int value) {
    return PixelElementSize_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    PixelElementSize_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    PixelElementSize_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    PixelElementSize_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return PixelElementSize_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return PixelElementSize_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return PixelElementSize_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.PixelElementSize.Enum value = 1;
  void clear_value();
  ::frame::proto::PixelElementSize_Enum value() const;
  void set_value(::frame::proto::PixelElementSize_Enum value);
  private:
  ::frame::proto::PixelElementSize_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::PixelElementSize_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.PixelElementSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pixel_2eproto;
};
// -------------------------------------------------------------------

class PixelStructure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.PixelStructure) */ {
 public:
  inline PixelStructure() : PixelStructure(nullptr) {}
  ~PixelStructure() override;
  explicit PROTOBUF_CONSTEXPR PixelStructure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PixelStructure(const PixelStructure& from);
  PixelStructure(PixelStructure&& from) noexcept
    : PixelStructure() {
    *this = ::std::move(from);
  }

  inline PixelStructure& operator=(const PixelStructure& from) {
    CopyFrom(from);
    return *this;
  }
  inline PixelStructure& operator=(PixelStructure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PixelStructure& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelStructure* internal_default_instance() {
    return reinterpret_cast<const PixelStructure*>(
               &_PixelStructure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PixelStructure& a, PixelStructure& b) {
    a.Swap(&b);
  }
  inline void Swap(PixelStructure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelStructure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelStructure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PixelStructure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PixelStructure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PixelStructure& from) {
    PixelStructure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PixelStructure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.PixelStructure";
  }
  protected:
  explicit PixelStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PixelStructure_Enum Enum;
  static constexpr Enum INVALID =
    PixelStructure_Enum_INVALID;
  static constexpr Enum GREY =
    PixelStructure_Enum_GREY;
  static constexpr Enum GREY_ALPHA =
    PixelStructure_Enum_GREY_ALPHA;
  static constexpr Enum RGB =
    PixelStructure_Enum_RGB;
  static constexpr Enum RGB_ALPHA =
    PixelStructure_Enum_RGB_ALPHA;
  static constexpr Enum BGR =
    PixelStructure_Enum_BGR;
  static constexpr Enum BGR_ALPHA =
    PixelStructure_Enum_BGR_ALPHA;
  static inline bool Enum_IsValid(int value) {
    return PixelStructure_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    PixelStructure_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    PixelStructure_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    PixelStructure_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return PixelStructure_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return PixelStructure_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return PixelStructure_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.PixelStructure.Enum value = 1;
  void clear_value();
  ::frame::proto::PixelStructure_Enum value() const;
  void set_value(::frame::proto::PixelStructure_Enum value);
  private:
  ::frame::proto::PixelStructure_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::PixelStructure_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.PixelStructure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pixel_2eproto;
};
// -------------------------------------------------------------------

class PixelDepthComponent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.PixelDepthComponent) */ {
 public:
  inline PixelDepthComponent() : PixelDepthComponent(nullptr) {}
  ~PixelDepthComponent() override;
  explicit PROTOBUF_CONSTEXPR PixelDepthComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PixelDepthComponent(const PixelDepthComponent& from);
  PixelDepthComponent(PixelDepthComponent&& from) noexcept
    : PixelDepthComponent() {
    *this = ::std::move(from);
  }

  inline PixelDepthComponent& operator=(const PixelDepthComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PixelDepthComponent& operator=(PixelDepthComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PixelDepthComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelDepthComponent* internal_default_instance() {
    return reinterpret_cast<const PixelDepthComponent*>(
               &_PixelDepthComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PixelDepthComponent& a, PixelDepthComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(PixelDepthComponent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelDepthComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelDepthComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PixelDepthComponent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PixelDepthComponent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PixelDepthComponent& from) {
    PixelDepthComponent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PixelDepthComponent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.PixelDepthComponent";
  }
  protected:
  explicit PixelDepthComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PixelDepthComponent_Enum Enum;
  static constexpr Enum INVALID =
    PixelDepthComponent_Enum_INVALID;
  static constexpr Enum DEPTH_COMPONENT8 =
    PixelDepthComponent_Enum_DEPTH_COMPONENT8;
  static constexpr Enum DEPTH_COMPONENT16 =
    PixelDepthComponent_Enum_DEPTH_COMPONENT16;
  static constexpr Enum DEPTH_COMPONENT24 =
    PixelDepthComponent_Enum_DEPTH_COMPONENT24;
  static constexpr Enum DEPTH_COMPONENT32 =
    PixelDepthComponent_Enum_DEPTH_COMPONENT32;
  static inline bool Enum_IsValid(int value) {
    return PixelDepthComponent_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    PixelDepthComponent_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    PixelDepthComponent_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    PixelDepthComponent_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return PixelDepthComponent_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return PixelDepthComponent_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return PixelDepthComponent_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.PixelDepthComponent.Enum value = 1;
  void clear_value();
  ::frame::proto::PixelDepthComponent_Enum value() const;
  void set_value(::frame::proto::PixelDepthComponent_Enum value);
  private:
  ::frame::proto::PixelDepthComponent_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::PixelDepthComponent_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.PixelDepthComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pixel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CleanBuffer

// repeated .frame.proto.CleanBuffer.Enum values = 1;
inline int CleanBuffer::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int CleanBuffer::values_size() const {
  return _internal_values_size();
}
inline void CleanBuffer::clear_values() {
  _impl_.values_.Clear();
}
inline ::frame::proto::CleanBuffer_Enum CleanBuffer::_internal_values(int index) const {
  return static_cast< ::frame::proto::CleanBuffer_Enum >(_impl_.values_.Get(index));
}
inline ::frame::proto::CleanBuffer_Enum CleanBuffer::values(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.CleanBuffer.values)
  return _internal_values(index);
}
inline void CleanBuffer::set_values(int index, ::frame::proto::CleanBuffer_Enum value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:frame.proto.CleanBuffer.values)
}
inline void CleanBuffer::_internal_add_values(::frame::proto::CleanBuffer_Enum value) {
  _impl_.values_.Add(value);
}
inline void CleanBuffer::add_values(::frame::proto::CleanBuffer_Enum value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:frame.proto.CleanBuffer.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CleanBuffer::values() const {
  // @@protoc_insertion_point(field_list:frame.proto.CleanBuffer.values)
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CleanBuffer::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CleanBuffer::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.CleanBuffer.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// PixelElementSize

// .frame.proto.PixelElementSize.Enum value = 1;
inline void PixelElementSize::clear_value() {
  _impl_.value_ = 0;
}
inline ::frame::proto::PixelElementSize_Enum PixelElementSize::_internal_value() const {
  return static_cast< ::frame::proto::PixelElementSize_Enum >(_impl_.value_);
}
inline ::frame::proto::PixelElementSize_Enum PixelElementSize::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.PixelElementSize.value)
  return _internal_value();
}
inline void PixelElementSize::_internal_set_value(::frame::proto::PixelElementSize_Enum value) {
  
  _impl_.value_ = value;
}
inline void PixelElementSize::set_value(::frame::proto::PixelElementSize_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.PixelElementSize.value)
}

// -------------------------------------------------------------------

// PixelStructure

// .frame.proto.PixelStructure.Enum value = 1;
inline void PixelStructure::clear_value() {
  _impl_.value_ = 0;
}
inline ::frame::proto::PixelStructure_Enum PixelStructure::_internal_value() const {
  return static_cast< ::frame::proto::PixelStructure_Enum >(_impl_.value_);
}
inline ::frame::proto::PixelStructure_Enum PixelStructure::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.PixelStructure.value)
  return _internal_value();
}
inline void PixelStructure::_internal_set_value(::frame::proto::PixelStructure_Enum value) {
  
  _impl_.value_ = value;
}
inline void PixelStructure::set_value(::frame::proto::PixelStructure_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.PixelStructure.value)
}

// -------------------------------------------------------------------

// PixelDepthComponent

// .frame.proto.PixelDepthComponent.Enum value = 1;
inline void PixelDepthComponent::clear_value() {
  _impl_.value_ = 0;
}
inline ::frame::proto::PixelDepthComponent_Enum PixelDepthComponent::_internal_value() const {
  return static_cast< ::frame::proto::PixelDepthComponent_Enum >(_impl_.value_);
}
inline ::frame::proto::PixelDepthComponent_Enum PixelDepthComponent::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.PixelDepthComponent.value)
  return _internal_value();
}
inline void PixelDepthComponent::_internal_set_value(::frame::proto::PixelDepthComponent_Enum value) {
  
  _impl_.value_ = value;
}
inline void PixelDepthComponent::set_value(::frame::proto::PixelDepthComponent_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.PixelDepthComponent.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frame::proto::CleanBuffer_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::CleanBuffer_Enum>() {
  return ::frame::proto::CleanBuffer_Enum_descriptor();
}
template <> struct is_proto_enum< ::frame::proto::PixelElementSize_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::PixelElementSize_Enum>() {
  return ::frame::proto::PixelElementSize_Enum_descriptor();
}
template <> struct is_proto_enum< ::frame::proto::PixelStructure_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::PixelStructure_Enum>() {
  return ::frame::proto::PixelStructure_Enum_descriptor();
}
template <> struct is_proto_enum< ::frame::proto::PixelDepthComponent_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::PixelDepthComponent_Enum>() {
  return ::frame::proto::PixelDepthComponent_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pixel_2eproto

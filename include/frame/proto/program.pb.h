// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: program.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_program_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_program_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "uniform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_program_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_program_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_program_2eproto;
namespace frame {
namespace proto {
class Program;
struct ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
class SceneType;
struct SceneTypeDefaultTypeInternal;
extern SceneTypeDefaultTypeInternal _SceneType_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::Program* Arena::CreateMaybeMessage<::frame::proto::Program>(Arena*);
template<> ::frame::proto::SceneType* Arena::CreateMaybeMessage<::frame::proto::SceneType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

enum SceneType_Enum : int {
  SceneType_Enum_NONE = 0,
  SceneType_Enum_QUAD = 1,
  SceneType_Enum_CUBE = 2,
  SceneType_Enum_SCENE = 3,
  SceneType_Enum_SceneType_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SceneType_Enum_SceneType_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SceneType_Enum_IsValid(int value);
constexpr SceneType_Enum SceneType_Enum_Enum_MIN = SceneType_Enum_NONE;
constexpr SceneType_Enum SceneType_Enum_Enum_MAX = SceneType_Enum_SCENE;
constexpr int SceneType_Enum_Enum_ARRAYSIZE = SceneType_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SceneType_Enum_descriptor();
template<typename T>
inline const std::string& SceneType_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SceneType_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SceneType_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SceneType_Enum_descriptor(), enum_t_value);
}
inline bool SceneType_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SceneType_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SceneType_Enum>(
    SceneType_Enum_descriptor(), name, value);
}
// ===================================================================

class SceneType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.SceneType) */ {
 public:
  inline SceneType() : SceneType(nullptr) {}
  ~SceneType() override;
  explicit PROTOBUF_CONSTEXPR SceneType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneType(const SceneType& from);
  SceneType(SceneType&& from) noexcept
    : SceneType() {
    *this = ::std::move(from);
  }

  inline SceneType& operator=(const SceneType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneType& operator=(SceneType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneType& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneType* internal_default_instance() {
    return reinterpret_cast<const SceneType*>(
               &_SceneType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SceneType& a, SceneType& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneType& from) {
    SceneType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.SceneType";
  }
  protected:
  explicit SceneType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SceneType_Enum Enum;
  static constexpr Enum NONE =
    SceneType_Enum_NONE;
  static constexpr Enum QUAD =
    SceneType_Enum_QUAD;
  static constexpr Enum CUBE =
    SceneType_Enum_CUBE;
  static constexpr Enum SCENE =
    SceneType_Enum_SCENE;
  static inline bool Enum_IsValid(int value) {
    return SceneType_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    SceneType_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    SceneType_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    SceneType_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return SceneType_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return SceneType_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return SceneType_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.SceneType.Enum value = 1;
  void clear_value();
  ::frame::proto::SceneType_Enum value() const;
  void set_value(::frame::proto::SceneType_Enum value);
  private:
  ::frame::proto::SceneType_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::SceneType_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.SceneType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_program_2eproto;
};
// -------------------------------------------------------------------

class Program final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Program) */ {
 public:
  inline Program() : Program(nullptr) {}
  ~Program() override;
  explicit PROTOBUF_CONSTEXPR Program(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Program(const Program& from);
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Program& default_instance() {
    return *internal_default_instance();
  }
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }
  inline void Swap(Program* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Program* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Program* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Program& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Program& from) {
    Program::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Program";
  }
  protected:
  explicit Program(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputTextureNamesFieldNumber = 3,
    kOutputTextureNamesFieldNumber = 4,
    kParametersFieldNumber = 7,
    kNameFieldNumber = 1,
    kInputSceneRootNameFieldNumber = 5,
    kShaderFieldNumber = 6,
    kInputSceneTypeFieldNumber = 9,
  };
  // repeated string input_texture_names = 3;
  int input_texture_names_size() const;
  private:
  int _internal_input_texture_names_size() const;
  public:
  void clear_input_texture_names();
  const std::string& input_texture_names(int index) const;
  std::string* mutable_input_texture_names(int index);
  void set_input_texture_names(int index, const std::string& value);
  void set_input_texture_names(int index, std::string&& value);
  void set_input_texture_names(int index, const char* value);
  void set_input_texture_names(int index, const char* value, size_t size);
  std::string* add_input_texture_names();
  void add_input_texture_names(const std::string& value);
  void add_input_texture_names(std::string&& value);
  void add_input_texture_names(const char* value);
  void add_input_texture_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_texture_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_texture_names();
  private:
  const std::string& _internal_input_texture_names(int index) const;
  std::string* _internal_add_input_texture_names();
  public:

  // repeated string output_texture_names = 4;
  int output_texture_names_size() const;
  private:
  int _internal_output_texture_names_size() const;
  public:
  void clear_output_texture_names();
  const std::string& output_texture_names(int index) const;
  std::string* mutable_output_texture_names(int index);
  void set_output_texture_names(int index, const std::string& value);
  void set_output_texture_names(int index, std::string&& value);
  void set_output_texture_names(int index, const char* value);
  void set_output_texture_names(int index, const char* value, size_t size);
  std::string* add_output_texture_names();
  void add_output_texture_names(const std::string& value);
  void add_output_texture_names(std::string&& value);
  void add_output_texture_names(const char* value);
  void add_output_texture_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_texture_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_texture_names();
  private:
  const std::string& _internal_output_texture_names(int index) const;
  std::string* _internal_add_output_texture_names();
  public:

  // repeated .frame.proto.Uniform parameters = 7;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::frame::proto::Uniform* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform >*
      mutable_parameters();
  private:
  const ::frame::proto::Uniform& _internal_parameters(int index) const;
  ::frame::proto::Uniform* _internal_add_parameters();
  public:
  const ::frame::proto::Uniform& parameters(int index) const;
  ::frame::proto::Uniform* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform >&
      parameters() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string input_scene_root_name = 5;
  void clear_input_scene_root_name();
  const std::string& input_scene_root_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_scene_root_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_scene_root_name();
  PROTOBUF_NODISCARD std::string* release_input_scene_root_name();
  void set_allocated_input_scene_root_name(std::string* input_scene_root_name);
  private:
  const std::string& _internal_input_scene_root_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_scene_root_name(const std::string& value);
  std::string* _internal_mutable_input_scene_root_name();
  public:

  // string shader = 6;
  void clear_shader();
  const std::string& shader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shader();
  PROTOBUF_NODISCARD std::string* release_shader();
  void set_allocated_shader(std::string* shader);
  private:
  const std::string& _internal_shader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shader(const std::string& value);
  std::string* _internal_mutable_shader();
  public:

  // .frame.proto.SceneType input_scene_type = 9;
  bool has_input_scene_type() const;
  private:
  bool _internal_has_input_scene_type() const;
  public:
  void clear_input_scene_type();
  const ::frame::proto::SceneType& input_scene_type() const;
  PROTOBUF_NODISCARD ::frame::proto::SceneType* release_input_scene_type();
  ::frame::proto::SceneType* mutable_input_scene_type();
  void set_allocated_input_scene_type(::frame::proto::SceneType* input_scene_type);
  private:
  const ::frame::proto::SceneType& _internal_input_scene_type() const;
  ::frame::proto::SceneType* _internal_mutable_input_scene_type();
  public:
  void unsafe_arena_set_allocated_input_scene_type(
      ::frame::proto::SceneType* input_scene_type);
  ::frame::proto::SceneType* unsafe_arena_release_input_scene_type();

  // @@protoc_insertion_point(class_scope:frame.proto.Program)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_texture_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_texture_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform > parameters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_scene_root_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shader_;
    ::frame::proto::SceneType* input_scene_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_program_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SceneType

// .frame.proto.SceneType.Enum value = 1;
inline void SceneType::clear_value() {
  _impl_.value_ = 0;
}
inline ::frame::proto::SceneType_Enum SceneType::_internal_value() const {
  return static_cast< ::frame::proto::SceneType_Enum >(_impl_.value_);
}
inline ::frame::proto::SceneType_Enum SceneType::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.SceneType.value)
  return _internal_value();
}
inline void SceneType::_internal_set_value(::frame::proto::SceneType_Enum value) {
  
  _impl_.value_ = value;
}
inline void SceneType::set_value(::frame::proto::SceneType_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.SceneType.value)
}

// -------------------------------------------------------------------

// Program

// string name = 1;
inline void Program::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Program::name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Program.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Program::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Program.name)
}
inline std::string* Program::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.name)
  return _s;
}
inline const std::string& Program::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Program::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Program::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Program::release_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Program.name)
  return _impl_.name_.Release();
}
inline void Program::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Program.name)
}

// repeated string input_texture_names = 3;
inline int Program::_internal_input_texture_names_size() const {
  return _impl_.input_texture_names_.size();
}
inline int Program::input_texture_names_size() const {
  return _internal_input_texture_names_size();
}
inline void Program::clear_input_texture_names() {
  _impl_.input_texture_names_.Clear();
}
inline std::string* Program::add_input_texture_names() {
  std::string* _s = _internal_add_input_texture_names();
  // @@protoc_insertion_point(field_add_mutable:frame.proto.Program.input_texture_names)
  return _s;
}
inline const std::string& Program::_internal_input_texture_names(int index) const {
  return _impl_.input_texture_names_.Get(index);
}
inline const std::string& Program::input_texture_names(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Program.input_texture_names)
  return _internal_input_texture_names(index);
}
inline std::string* Program::mutable_input_texture_names(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.input_texture_names)
  return _impl_.input_texture_names_.Mutable(index);
}
inline void Program::set_input_texture_names(int index, const std::string& value) {
  _impl_.input_texture_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:frame.proto.Program.input_texture_names)
}
inline void Program::set_input_texture_names(int index, std::string&& value) {
  _impl_.input_texture_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:frame.proto.Program.input_texture_names)
}
inline void Program::set_input_texture_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_texture_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:frame.proto.Program.input_texture_names)
}
inline void Program::set_input_texture_names(int index, const char* value, size_t size) {
  _impl_.input_texture_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Program.input_texture_names)
}
inline std::string* Program::_internal_add_input_texture_names() {
  return _impl_.input_texture_names_.Add();
}
inline void Program::add_input_texture_names(const std::string& value) {
  _impl_.input_texture_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:frame.proto.Program.input_texture_names)
}
inline void Program::add_input_texture_names(std::string&& value) {
  _impl_.input_texture_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:frame.proto.Program.input_texture_names)
}
inline void Program::add_input_texture_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_texture_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:frame.proto.Program.input_texture_names)
}
inline void Program::add_input_texture_names(const char* value, size_t size) {
  _impl_.input_texture_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:frame.proto.Program.input_texture_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Program::input_texture_names() const {
  // @@protoc_insertion_point(field_list:frame.proto.Program.input_texture_names)
  return _impl_.input_texture_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Program::mutable_input_texture_names() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Program.input_texture_names)
  return &_impl_.input_texture_names_;
}

// repeated string output_texture_names = 4;
inline int Program::_internal_output_texture_names_size() const {
  return _impl_.output_texture_names_.size();
}
inline int Program::output_texture_names_size() const {
  return _internal_output_texture_names_size();
}
inline void Program::clear_output_texture_names() {
  _impl_.output_texture_names_.Clear();
}
inline std::string* Program::add_output_texture_names() {
  std::string* _s = _internal_add_output_texture_names();
  // @@protoc_insertion_point(field_add_mutable:frame.proto.Program.output_texture_names)
  return _s;
}
inline const std::string& Program::_internal_output_texture_names(int index) const {
  return _impl_.output_texture_names_.Get(index);
}
inline const std::string& Program::output_texture_names(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Program.output_texture_names)
  return _internal_output_texture_names(index);
}
inline std::string* Program::mutable_output_texture_names(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.output_texture_names)
  return _impl_.output_texture_names_.Mutable(index);
}
inline void Program::set_output_texture_names(int index, const std::string& value) {
  _impl_.output_texture_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:frame.proto.Program.output_texture_names)
}
inline void Program::set_output_texture_names(int index, std::string&& value) {
  _impl_.output_texture_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:frame.proto.Program.output_texture_names)
}
inline void Program::set_output_texture_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.output_texture_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:frame.proto.Program.output_texture_names)
}
inline void Program::set_output_texture_names(int index, const char* value, size_t size) {
  _impl_.output_texture_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Program.output_texture_names)
}
inline std::string* Program::_internal_add_output_texture_names() {
  return _impl_.output_texture_names_.Add();
}
inline void Program::add_output_texture_names(const std::string& value) {
  _impl_.output_texture_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:frame.proto.Program.output_texture_names)
}
inline void Program::add_output_texture_names(std::string&& value) {
  _impl_.output_texture_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:frame.proto.Program.output_texture_names)
}
inline void Program::add_output_texture_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.output_texture_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:frame.proto.Program.output_texture_names)
}
inline void Program::add_output_texture_names(const char* value, size_t size) {
  _impl_.output_texture_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:frame.proto.Program.output_texture_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Program::output_texture_names() const {
  // @@protoc_insertion_point(field_list:frame.proto.Program.output_texture_names)
  return _impl_.output_texture_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Program::mutable_output_texture_names() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Program.output_texture_names)
  return &_impl_.output_texture_names_;
}

// .frame.proto.SceneType input_scene_type = 9;
inline bool Program::_internal_has_input_scene_type() const {
  return this != internal_default_instance() && _impl_.input_scene_type_ != nullptr;
}
inline bool Program::has_input_scene_type() const {
  return _internal_has_input_scene_type();
}
inline void Program::clear_input_scene_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.input_scene_type_ != nullptr) {
    delete _impl_.input_scene_type_;
  }
  _impl_.input_scene_type_ = nullptr;
}
inline const ::frame::proto::SceneType& Program::_internal_input_scene_type() const {
  const ::frame::proto::SceneType* p = _impl_.input_scene_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::SceneType&>(
      ::frame::proto::_SceneType_default_instance_);
}
inline const ::frame::proto::SceneType& Program::input_scene_type() const {
  // @@protoc_insertion_point(field_get:frame.proto.Program.input_scene_type)
  return _internal_input_scene_type();
}
inline void Program::unsafe_arena_set_allocated_input_scene_type(
    ::frame::proto::SceneType* input_scene_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_scene_type_);
  }
  _impl_.input_scene_type_ = input_scene_type;
  if (input_scene_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Program.input_scene_type)
}
inline ::frame::proto::SceneType* Program::release_input_scene_type() {
  
  ::frame::proto::SceneType* temp = _impl_.input_scene_type_;
  _impl_.input_scene_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frame::proto::SceneType* Program::unsafe_arena_release_input_scene_type() {
  // @@protoc_insertion_point(field_release:frame.proto.Program.input_scene_type)
  
  ::frame::proto::SceneType* temp = _impl_.input_scene_type_;
  _impl_.input_scene_type_ = nullptr;
  return temp;
}
inline ::frame::proto::SceneType* Program::_internal_mutable_input_scene_type() {
  
  if (_impl_.input_scene_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::SceneType>(GetArenaForAllocation());
    _impl_.input_scene_type_ = p;
  }
  return _impl_.input_scene_type_;
}
inline ::frame::proto::SceneType* Program::mutable_input_scene_type() {
  ::frame::proto::SceneType* _msg = _internal_mutable_input_scene_type();
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.input_scene_type)
  return _msg;
}
inline void Program::set_allocated_input_scene_type(::frame::proto::SceneType* input_scene_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_scene_type_;
  }
  if (input_scene_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input_scene_type);
    if (message_arena != submessage_arena) {
      input_scene_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_scene_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.input_scene_type_ = input_scene_type;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Program.input_scene_type)
}

// string input_scene_root_name = 5;
inline void Program::clear_input_scene_root_name() {
  _impl_.input_scene_root_name_.ClearToEmpty();
}
inline const std::string& Program::input_scene_root_name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Program.input_scene_root_name)
  return _internal_input_scene_root_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Program::set_input_scene_root_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_scene_root_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Program.input_scene_root_name)
}
inline std::string* Program::mutable_input_scene_root_name() {
  std::string* _s = _internal_mutable_input_scene_root_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.input_scene_root_name)
  return _s;
}
inline const std::string& Program::_internal_input_scene_root_name() const {
  return _impl_.input_scene_root_name_.Get();
}
inline void Program::_internal_set_input_scene_root_name(const std::string& value) {
  
  _impl_.input_scene_root_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Program::_internal_mutable_input_scene_root_name() {
  
  return _impl_.input_scene_root_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Program::release_input_scene_root_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Program.input_scene_root_name)
  return _impl_.input_scene_root_name_.Release();
}
inline void Program::set_allocated_input_scene_root_name(std::string* input_scene_root_name) {
  if (input_scene_root_name != nullptr) {
    
  } else {
    
  }
  _impl_.input_scene_root_name_.SetAllocated(input_scene_root_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_scene_root_name_.IsDefault()) {
    _impl_.input_scene_root_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Program.input_scene_root_name)
}

// string shader = 6;
inline void Program::clear_shader() {
  _impl_.shader_.ClearToEmpty();
}
inline const std::string& Program::shader() const {
  // @@protoc_insertion_point(field_get:frame.proto.Program.shader)
  return _internal_shader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Program::set_shader(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Program.shader)
}
inline std::string* Program::mutable_shader() {
  std::string* _s = _internal_mutable_shader();
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.shader)
  return _s;
}
inline const std::string& Program::_internal_shader() const {
  return _impl_.shader_.Get();
}
inline void Program::_internal_set_shader(const std::string& value) {
  
  _impl_.shader_.Set(value, GetArenaForAllocation());
}
inline std::string* Program::_internal_mutable_shader() {
  
  return _impl_.shader_.Mutable(GetArenaForAllocation());
}
inline std::string* Program::release_shader() {
  // @@protoc_insertion_point(field_release:frame.proto.Program.shader)
  return _impl_.shader_.Release();
}
inline void Program::set_allocated_shader(std::string* shader) {
  if (shader != nullptr) {
    
  } else {
    
  }
  _impl_.shader_.SetAllocated(shader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shader_.IsDefault()) {
    _impl_.shader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Program.shader)
}

// repeated .frame.proto.Uniform parameters = 7;
inline int Program::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int Program::parameters_size() const {
  return _internal_parameters_size();
}
inline ::frame::proto::Uniform* Program::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.parameters)
  return _impl_.parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform >*
Program::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Program.parameters)
  return &_impl_.parameters_;
}
inline const ::frame::proto::Uniform& Program::_internal_parameters(int index) const {
  return _impl_.parameters_.Get(index);
}
inline const ::frame::proto::Uniform& Program::parameters(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Program.parameters)
  return _internal_parameters(index);
}
inline ::frame::proto::Uniform* Program::_internal_add_parameters() {
  return _impl_.parameters_.Add();
}
inline ::frame::proto::Uniform* Program::add_parameters() {
  ::frame::proto::Uniform* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:frame.proto.Program.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform >&
Program::parameters() const {
  // @@protoc_insertion_point(field_list:frame.proto.Program.parameters)
  return _impl_.parameters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frame::proto::SceneType_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::SceneType_Enum>() {
  return ::frame::proto::SceneType_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_program_2eproto

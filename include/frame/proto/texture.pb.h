// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texture.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_texture_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_texture_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "size.pb.h"
#include "pixel.pb.h"
#include "plugin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_texture_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_texture_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_texture_2eproto;
namespace frame {
namespace proto {
class CubeMapFiles;
struct CubeMapFilesDefaultTypeInternal;
extern CubeMapFilesDefaultTypeInternal _CubeMapFiles_default_instance_;
class Texture;
struct TextureDefaultTypeInternal;
extern TextureDefaultTypeInternal _Texture_default_instance_;
class TextureFilter;
struct TextureFilterDefaultTypeInternal;
extern TextureFilterDefaultTypeInternal _TextureFilter_default_instance_;
class TextureFrame;
struct TextureFrameDefaultTypeInternal;
extern TextureFrameDefaultTypeInternal _TextureFrame_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::CubeMapFiles* Arena::CreateMaybeMessage<::frame::proto::CubeMapFiles>(Arena*);
template<> ::frame::proto::Texture* Arena::CreateMaybeMessage<::frame::proto::Texture>(Arena*);
template<> ::frame::proto::TextureFilter* Arena::CreateMaybeMessage<::frame::proto::TextureFilter>(Arena*);
template<> ::frame::proto::TextureFrame* Arena::CreateMaybeMessage<::frame::proto::TextureFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

enum TextureFilter_Enum : int {
  TextureFilter_Enum_INVALID = 0,
  TextureFilter_Enum_NEAREST = 1,
  TextureFilter_Enum_LINEAR = 2,
  TextureFilter_Enum_NEAREST_MIPMAP_NEAREST = 3,
  TextureFilter_Enum_LINEAR_MIPMAP_NEAREST = 4,
  TextureFilter_Enum_NEAREST_MIPMAP_LINEAR = 5,
  TextureFilter_Enum_LINEAR_MIPMAP_LINEAR = 6,
  TextureFilter_Enum_CLAMP_TO_EDGE = 7,
  TextureFilter_Enum_MIRRORED_REPEAT = 8,
  TextureFilter_Enum_REPEAT = 9,
  TextureFilter_Enum_CLAMP_TO_BORDER = 10,
  TextureFilter_Enum_TextureFilter_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TextureFilter_Enum_TextureFilter_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TextureFilter_Enum_IsValid(int value);
constexpr TextureFilter_Enum TextureFilter_Enum_Enum_MIN = TextureFilter_Enum_INVALID;
constexpr TextureFilter_Enum TextureFilter_Enum_Enum_MAX = TextureFilter_Enum_CLAMP_TO_BORDER;
constexpr int TextureFilter_Enum_Enum_ARRAYSIZE = TextureFilter_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureFilter_Enum_descriptor();
template<typename T>
inline const std::string& TextureFilter_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextureFilter_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextureFilter_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextureFilter_Enum_descriptor(), enum_t_value);
}
inline bool TextureFilter_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextureFilter_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextureFilter_Enum>(
    TextureFilter_Enum_descriptor(), name, value);
}
enum TextureFrame_Enum : int {
  TextureFrame_Enum_INVALID = 0,
  TextureFrame_Enum_CUBE_MAP_POSITIVE_X = 1,
  TextureFrame_Enum_CUBE_MAP_NEGATIVE_X = 2,
  TextureFrame_Enum_CUBE_MAP_POSITIVE_Y = 3,
  TextureFrame_Enum_CUBE_MAP_NEGATIVE_Y = 4,
  TextureFrame_Enum_CUBE_MAP_POSITIVE_Z = 5,
  TextureFrame_Enum_CUBE_MAP_NEGATIVE_Z = 6,
  TextureFrame_Enum_TEXTURE_2D = 7,
  TextureFrame_Enum_TextureFrame_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TextureFrame_Enum_TextureFrame_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TextureFrame_Enum_IsValid(int value);
constexpr TextureFrame_Enum TextureFrame_Enum_Enum_MIN = TextureFrame_Enum_INVALID;
constexpr TextureFrame_Enum TextureFrame_Enum_Enum_MAX = TextureFrame_Enum_TEXTURE_2D;
constexpr int TextureFrame_Enum_Enum_ARRAYSIZE = TextureFrame_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureFrame_Enum_descriptor();
template<typename T>
inline const std::string& TextureFrame_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextureFrame_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextureFrame_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextureFrame_Enum_descriptor(), enum_t_value);
}
inline bool TextureFrame_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextureFrame_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextureFrame_Enum>(
    TextureFrame_Enum_descriptor(), name, value);
}
// ===================================================================

class TextureFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.TextureFilter) */ {
 public:
  inline TextureFilter() : TextureFilter(nullptr) {}
  ~TextureFilter() override;
  explicit PROTOBUF_CONSTEXPR TextureFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextureFilter(const TextureFilter& from);
  TextureFilter(TextureFilter&& from) noexcept
    : TextureFilter() {
    *this = ::std::move(from);
  }

  inline TextureFilter& operator=(const TextureFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureFilter& operator=(TextureFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextureFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextureFilter* internal_default_instance() {
    return reinterpret_cast<const TextureFilter*>(
               &_TextureFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextureFilter& a, TextureFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(TextureFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextureFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextureFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextureFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextureFilter& from) {
    TextureFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextureFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.TextureFilter";
  }
  protected:
  explicit TextureFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TextureFilter_Enum Enum;
  static constexpr Enum INVALID =
    TextureFilter_Enum_INVALID;
  static constexpr Enum NEAREST =
    TextureFilter_Enum_NEAREST;
  static constexpr Enum LINEAR =
    TextureFilter_Enum_LINEAR;
  static constexpr Enum NEAREST_MIPMAP_NEAREST =
    TextureFilter_Enum_NEAREST_MIPMAP_NEAREST;
  static constexpr Enum LINEAR_MIPMAP_NEAREST =
    TextureFilter_Enum_LINEAR_MIPMAP_NEAREST;
  static constexpr Enum NEAREST_MIPMAP_LINEAR =
    TextureFilter_Enum_NEAREST_MIPMAP_LINEAR;
  static constexpr Enum LINEAR_MIPMAP_LINEAR =
    TextureFilter_Enum_LINEAR_MIPMAP_LINEAR;
  static constexpr Enum CLAMP_TO_EDGE =
    TextureFilter_Enum_CLAMP_TO_EDGE;
  static constexpr Enum MIRRORED_REPEAT =
    TextureFilter_Enum_MIRRORED_REPEAT;
  static constexpr Enum REPEAT =
    TextureFilter_Enum_REPEAT;
  static constexpr Enum CLAMP_TO_BORDER =
    TextureFilter_Enum_CLAMP_TO_BORDER;
  static inline bool Enum_IsValid(int value) {
    return TextureFilter_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    TextureFilter_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    TextureFilter_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    TextureFilter_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return TextureFilter_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return TextureFilter_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return TextureFilter_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.TextureFilter.Enum value = 1;
  void clear_value();
  ::frame::proto::TextureFilter_Enum value() const;
  void set_value(::frame::proto::TextureFilter_Enum value);
  private:
  ::frame::proto::TextureFilter_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::TextureFilter_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.TextureFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texture_2eproto;
};
// -------------------------------------------------------------------

class TextureFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.TextureFrame) */ {
 public:
  inline TextureFrame() : TextureFrame(nullptr) {}
  ~TextureFrame() override;
  explicit PROTOBUF_CONSTEXPR TextureFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextureFrame(const TextureFrame& from);
  TextureFrame(TextureFrame&& from) noexcept
    : TextureFrame() {
    *this = ::std::move(from);
  }

  inline TextureFrame& operator=(const TextureFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureFrame& operator=(TextureFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextureFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextureFrame* internal_default_instance() {
    return reinterpret_cast<const TextureFrame*>(
               &_TextureFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextureFrame& a, TextureFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(TextureFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextureFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextureFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextureFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextureFrame& from) {
    TextureFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextureFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.TextureFrame";
  }
  protected:
  explicit TextureFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TextureFrame_Enum Enum;
  static constexpr Enum INVALID =
    TextureFrame_Enum_INVALID;
  static constexpr Enum CUBE_MAP_POSITIVE_X =
    TextureFrame_Enum_CUBE_MAP_POSITIVE_X;
  static constexpr Enum CUBE_MAP_NEGATIVE_X =
    TextureFrame_Enum_CUBE_MAP_NEGATIVE_X;
  static constexpr Enum CUBE_MAP_POSITIVE_Y =
    TextureFrame_Enum_CUBE_MAP_POSITIVE_Y;
  static constexpr Enum CUBE_MAP_NEGATIVE_Y =
    TextureFrame_Enum_CUBE_MAP_NEGATIVE_Y;
  static constexpr Enum CUBE_MAP_POSITIVE_Z =
    TextureFrame_Enum_CUBE_MAP_POSITIVE_Z;
  static constexpr Enum CUBE_MAP_NEGATIVE_Z =
    TextureFrame_Enum_CUBE_MAP_NEGATIVE_Z;
  static constexpr Enum TEXTURE_2D =
    TextureFrame_Enum_TEXTURE_2D;
  static inline bool Enum_IsValid(int value) {
    return TextureFrame_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    TextureFrame_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    TextureFrame_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    TextureFrame_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return TextureFrame_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return TextureFrame_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return TextureFrame_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.TextureFrame.Enum value = 1;
  void clear_value();
  ::frame::proto::TextureFrame_Enum value() const;
  void set_value(::frame::proto::TextureFrame_Enum value);
  private:
  ::frame::proto::TextureFrame_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::TextureFrame_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.TextureFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texture_2eproto;
};
// -------------------------------------------------------------------

class CubeMapFiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.CubeMapFiles) */ {
 public:
  inline CubeMapFiles() : CubeMapFiles(nullptr) {}
  ~CubeMapFiles() override;
  explicit PROTOBUF_CONSTEXPR CubeMapFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CubeMapFiles(const CubeMapFiles& from);
  CubeMapFiles(CubeMapFiles&& from) noexcept
    : CubeMapFiles() {
    *this = ::std::move(from);
  }

  inline CubeMapFiles& operator=(const CubeMapFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline CubeMapFiles& operator=(CubeMapFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CubeMapFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const CubeMapFiles* internal_default_instance() {
    return reinterpret_cast<const CubeMapFiles*>(
               &_CubeMapFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CubeMapFiles& a, CubeMapFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(CubeMapFiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CubeMapFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CubeMapFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CubeMapFiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CubeMapFiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CubeMapFiles& from) {
    CubeMapFiles::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CubeMapFiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.CubeMapFiles";
  }
  protected:
  explicit CubeMapFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositiveXFieldNumber = 1,
    kNegativeXFieldNumber = 2,
    kPositiveYFieldNumber = 3,
    kNegativeYFieldNumber = 4,
    kPositiveZFieldNumber = 5,
    kNegativeZFieldNumber = 6,
  };
  // string positive_x = 1;
  void clear_positive_x();
  const std::string& positive_x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_positive_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_positive_x();
  PROTOBUF_NODISCARD std::string* release_positive_x();
  void set_allocated_positive_x(std::string* positive_x);
  private:
  const std::string& _internal_positive_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positive_x(const std::string& value);
  std::string* _internal_mutable_positive_x();
  public:

  // string negative_x = 2;
  void clear_negative_x();
  const std::string& negative_x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_negative_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_negative_x();
  PROTOBUF_NODISCARD std::string* release_negative_x();
  void set_allocated_negative_x(std::string* negative_x);
  private:
  const std::string& _internal_negative_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_negative_x(const std::string& value);
  std::string* _internal_mutable_negative_x();
  public:

  // string positive_y = 3;
  void clear_positive_y();
  const std::string& positive_y() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_positive_y(ArgT0&& arg0, ArgT... args);
  std::string* mutable_positive_y();
  PROTOBUF_NODISCARD std::string* release_positive_y();
  void set_allocated_positive_y(std::string* positive_y);
  private:
  const std::string& _internal_positive_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positive_y(const std::string& value);
  std::string* _internal_mutable_positive_y();
  public:

  // string negative_y = 4;
  void clear_negative_y();
  const std::string& negative_y() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_negative_y(ArgT0&& arg0, ArgT... args);
  std::string* mutable_negative_y();
  PROTOBUF_NODISCARD std::string* release_negative_y();
  void set_allocated_negative_y(std::string* negative_y);
  private:
  const std::string& _internal_negative_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_negative_y(const std::string& value);
  std::string* _internal_mutable_negative_y();
  public:

  // string positive_z = 5;
  void clear_positive_z();
  const std::string& positive_z() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_positive_z(ArgT0&& arg0, ArgT... args);
  std::string* mutable_positive_z();
  PROTOBUF_NODISCARD std::string* release_positive_z();
  void set_allocated_positive_z(std::string* positive_z);
  private:
  const std::string& _internal_positive_z() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positive_z(const std::string& value);
  std::string* _internal_mutable_positive_z();
  public:

  // string negative_z = 6;
  void clear_negative_z();
  const std::string& negative_z() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_negative_z(ArgT0&& arg0, ArgT... args);
  std::string* mutable_negative_z();
  PROTOBUF_NODISCARD std::string* release_negative_z();
  void set_allocated_negative_z(std::string* negative_z);
  private:
  const std::string& _internal_negative_z() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_negative_z(const std::string& value);
  std::string* _internal_mutable_negative_z();
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.CubeMapFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positive_x_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr negative_x_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positive_y_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr negative_y_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positive_z_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr negative_z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texture_2eproto;
};
// -------------------------------------------------------------------

class Texture final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Texture) */ {
 public:
  inline Texture() : Texture(nullptr) {}
  ~Texture() override;
  explicit PROTOBUF_CONSTEXPR Texture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Texture(const Texture& from);
  Texture(Texture&& from) noexcept
    : Texture() {
    *this = ::std::move(from);
  }

  inline Texture& operator=(const Texture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Texture& operator=(Texture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Texture& default_instance() {
    return *internal_default_instance();
  }
  enum TextureOneofCase {
    kPixels = 13,
    kFileName = 14,
    kPlugin = 17,
    kFileNames = 15,
    TEXTURE_ONEOF_NOT_SET = 0,
  };

  static inline const Texture* internal_default_instance() {
    return reinterpret_cast<const Texture*>(
               &_Texture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Texture& a, Texture& b) {
    a.Swap(&b);
  }
  inline void Swap(Texture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Texture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Texture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Texture>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Texture& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Texture& from) {
    Texture::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Texture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Texture";
  }
  protected:
  explicit Texture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kPixelElementSizeFieldNumber = 6,
    kPixelStructureFieldNumber = 7,
    kMinFilterFieldNumber = 8,
    kMagFilterFieldNumber = 9,
    kWrapSFieldNumber = 10,
    kWrapTFieldNumber = 11,
    kClearZFieldNumber = 3,
    kClearColorFieldNumber = 16,
    kMipmapFieldNumber = 4,
    kCubemapFieldNumber = 5,
    kPixelsFieldNumber = 13,
    kFileNameFieldNumber = 14,
    kPluginFieldNumber = 17,
    kFileNamesFieldNumber = 15,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .frame.proto.Size size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::frame::proto::Size& size() const;
  PROTOBUF_NODISCARD ::frame::proto::Size* release_size();
  ::frame::proto::Size* mutable_size();
  void set_allocated_size(::frame::proto::Size* size);
  private:
  const ::frame::proto::Size& _internal_size() const;
  ::frame::proto::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::frame::proto::Size* size);
  ::frame::proto::Size* unsafe_arena_release_size();

  // .frame.proto.PixelElementSize pixel_element_size = 6;
  bool has_pixel_element_size() const;
  private:
  bool _internal_has_pixel_element_size() const;
  public:
  void clear_pixel_element_size();
  const ::frame::proto::PixelElementSize& pixel_element_size() const;
  PROTOBUF_NODISCARD ::frame::proto::PixelElementSize* release_pixel_element_size();
  ::frame::proto::PixelElementSize* mutable_pixel_element_size();
  void set_allocated_pixel_element_size(::frame::proto::PixelElementSize* pixel_element_size);
  private:
  const ::frame::proto::PixelElementSize& _internal_pixel_element_size() const;
  ::frame::proto::PixelElementSize* _internal_mutable_pixel_element_size();
  public:
  void unsafe_arena_set_allocated_pixel_element_size(
      ::frame::proto::PixelElementSize* pixel_element_size);
  ::frame::proto::PixelElementSize* unsafe_arena_release_pixel_element_size();

  // .frame.proto.PixelStructure pixel_structure = 7;
  bool has_pixel_structure() const;
  private:
  bool _internal_has_pixel_structure() const;
  public:
  void clear_pixel_structure();
  const ::frame::proto::PixelStructure& pixel_structure() const;
  PROTOBUF_NODISCARD ::frame::proto::PixelStructure* release_pixel_structure();
  ::frame::proto::PixelStructure* mutable_pixel_structure();
  void set_allocated_pixel_structure(::frame::proto::PixelStructure* pixel_structure);
  private:
  const ::frame::proto::PixelStructure& _internal_pixel_structure() const;
  ::frame::proto::PixelStructure* _internal_mutable_pixel_structure();
  public:
  void unsafe_arena_set_allocated_pixel_structure(
      ::frame::proto::PixelStructure* pixel_structure);
  ::frame::proto::PixelStructure* unsafe_arena_release_pixel_structure();

  // .frame.proto.TextureFilter min_filter = 8;
  bool has_min_filter() const;
  private:
  bool _internal_has_min_filter() const;
  public:
  void clear_min_filter();
  const ::frame::proto::TextureFilter& min_filter() const;
  PROTOBUF_NODISCARD ::frame::proto::TextureFilter* release_min_filter();
  ::frame::proto::TextureFilter* mutable_min_filter();
  void set_allocated_min_filter(::frame::proto::TextureFilter* min_filter);
  private:
  const ::frame::proto::TextureFilter& _internal_min_filter() const;
  ::frame::proto::TextureFilter* _internal_mutable_min_filter();
  public:
  void unsafe_arena_set_allocated_min_filter(
      ::frame::proto::TextureFilter* min_filter);
  ::frame::proto::TextureFilter* unsafe_arena_release_min_filter();

  // .frame.proto.TextureFilter mag_filter = 9;
  bool has_mag_filter() const;
  private:
  bool _internal_has_mag_filter() const;
  public:
  void clear_mag_filter();
  const ::frame::proto::TextureFilter& mag_filter() const;
  PROTOBUF_NODISCARD ::frame::proto::TextureFilter* release_mag_filter();
  ::frame::proto::TextureFilter* mutable_mag_filter();
  void set_allocated_mag_filter(::frame::proto::TextureFilter* mag_filter);
  private:
  const ::frame::proto::TextureFilter& _internal_mag_filter() const;
  ::frame::proto::TextureFilter* _internal_mutable_mag_filter();
  public:
  void unsafe_arena_set_allocated_mag_filter(
      ::frame::proto::TextureFilter* mag_filter);
  ::frame::proto::TextureFilter* unsafe_arena_release_mag_filter();

  // .frame.proto.TextureFilter wrap_s = 10;
  bool has_wrap_s() const;
  private:
  bool _internal_has_wrap_s() const;
  public:
  void clear_wrap_s();
  const ::frame::proto::TextureFilter& wrap_s() const;
  PROTOBUF_NODISCARD ::frame::proto::TextureFilter* release_wrap_s();
  ::frame::proto::TextureFilter* mutable_wrap_s();
  void set_allocated_wrap_s(::frame::proto::TextureFilter* wrap_s);
  private:
  const ::frame::proto::TextureFilter& _internal_wrap_s() const;
  ::frame::proto::TextureFilter* _internal_mutable_wrap_s();
  public:
  void unsafe_arena_set_allocated_wrap_s(
      ::frame::proto::TextureFilter* wrap_s);
  ::frame::proto::TextureFilter* unsafe_arena_release_wrap_s();

  // .frame.proto.TextureFilter wrap_t = 11;
  bool has_wrap_t() const;
  private:
  bool _internal_has_wrap_t() const;
  public:
  void clear_wrap_t();
  const ::frame::proto::TextureFilter& wrap_t() const;
  PROTOBUF_NODISCARD ::frame::proto::TextureFilter* release_wrap_t();
  ::frame::proto::TextureFilter* mutable_wrap_t();
  void set_allocated_wrap_t(::frame::proto::TextureFilter* wrap_t);
  private:
  const ::frame::proto::TextureFilter& _internal_wrap_t() const;
  ::frame::proto::TextureFilter* _internal_mutable_wrap_t();
  public:
  void unsafe_arena_set_allocated_wrap_t(
      ::frame::proto::TextureFilter* wrap_t);
  ::frame::proto::TextureFilter* unsafe_arena_release_wrap_t();

  // bool clear_z = 3;
  void clear_clear_z();
  bool clear_z() const;
  void set_clear_z(bool value);
  private:
  bool _internal_clear_z() const;
  void _internal_set_clear_z(bool value);
  public:

  // bool clear_color = 16;
  void clear_clear_color();
  bool clear_color() const;
  void set_clear_color(bool value);
  private:
  bool _internal_clear_color() const;
  void _internal_set_clear_color(bool value);
  public:

  // bool mipmap = 4;
  void clear_mipmap();
  bool mipmap() const;
  void set_mipmap(bool value);
  private:
  bool _internal_mipmap() const;
  void _internal_set_mipmap(bool value);
  public:

  // bool cubemap = 5;
  void clear_cubemap();
  bool cubemap() const;
  void set_cubemap(bool value);
  private:
  bool _internal_cubemap() const;
  void _internal_set_cubemap(bool value);
  public:

  // bytes pixels = 13;
  bool has_pixels() const;
  private:
  bool _internal_has_pixels() const;
  public:
  void clear_pixels();
  const std::string& pixels() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pixels(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pixels();
  PROTOBUF_NODISCARD std::string* release_pixels();
  void set_allocated_pixels(std::string* pixels);
  private:
  const std::string& _internal_pixels() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pixels(const std::string& value);
  std::string* _internal_mutable_pixels();
  public:

  // string file_name = 14;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // .frame.proto.Plugin plugin = 17;
  bool has_plugin() const;
  private:
  bool _internal_has_plugin() const;
  public:
  void clear_plugin();
  const ::frame::proto::Plugin& plugin() const;
  PROTOBUF_NODISCARD ::frame::proto::Plugin* release_plugin();
  ::frame::proto::Plugin* mutable_plugin();
  void set_allocated_plugin(::frame::proto::Plugin* plugin);
  private:
  const ::frame::proto::Plugin& _internal_plugin() const;
  ::frame::proto::Plugin* _internal_mutable_plugin();
  public:
  void unsafe_arena_set_allocated_plugin(
      ::frame::proto::Plugin* plugin);
  ::frame::proto::Plugin* unsafe_arena_release_plugin();

  // .frame.proto.CubeMapFiles file_names = 15;
  bool has_file_names() const;
  private:
  bool _internal_has_file_names() const;
  public:
  void clear_file_names();
  const ::frame::proto::CubeMapFiles& file_names() const;
  PROTOBUF_NODISCARD ::frame::proto::CubeMapFiles* release_file_names();
  ::frame::proto::CubeMapFiles* mutable_file_names();
  void set_allocated_file_names(::frame::proto::CubeMapFiles* file_names);
  private:
  const ::frame::proto::CubeMapFiles& _internal_file_names() const;
  ::frame::proto::CubeMapFiles* _internal_mutable_file_names();
  public:
  void unsafe_arena_set_allocated_file_names(
      ::frame::proto::CubeMapFiles* file_names);
  ::frame::proto::CubeMapFiles* unsafe_arena_release_file_names();

  void clear_texture_oneof();
  TextureOneofCase texture_oneof_case() const;
  // @@protoc_insertion_point(class_scope:frame.proto.Texture)
 private:
  class _Internal;
  void set_has_pixels();
  void set_has_file_name();
  void set_has_plugin();
  void set_has_file_names();

  inline bool has_texture_oneof() const;
  inline void clear_has_texture_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::frame::proto::Size* size_;
    ::frame::proto::PixelElementSize* pixel_element_size_;
    ::frame::proto::PixelStructure* pixel_structure_;
    ::frame::proto::TextureFilter* min_filter_;
    ::frame::proto::TextureFilter* mag_filter_;
    ::frame::proto::TextureFilter* wrap_s_;
    ::frame::proto::TextureFilter* wrap_t_;
    bool clear_z_;
    bool clear_color_;
    bool mipmap_;
    bool cubemap_;
    union TextureOneofUnion {
      constexpr TextureOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixels_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
      ::frame::proto::Plugin* plugin_;
      ::frame::proto::CubeMapFiles* file_names_;
    } texture_oneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texture_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextureFilter

// .frame.proto.TextureFilter.Enum value = 1;
inline void TextureFilter::clear_value() {
  _impl_.value_ = 0;
}
inline ::frame::proto::TextureFilter_Enum TextureFilter::_internal_value() const {
  return static_cast< ::frame::proto::TextureFilter_Enum >(_impl_.value_);
}
inline ::frame::proto::TextureFilter_Enum TextureFilter::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.TextureFilter.value)
  return _internal_value();
}
inline void TextureFilter::_internal_set_value(::frame::proto::TextureFilter_Enum value) {
  
  _impl_.value_ = value;
}
inline void TextureFilter::set_value(::frame::proto::TextureFilter_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.TextureFilter.value)
}

// -------------------------------------------------------------------

// TextureFrame

// .frame.proto.TextureFrame.Enum value = 1;
inline void TextureFrame::clear_value() {
  _impl_.value_ = 0;
}
inline ::frame::proto::TextureFrame_Enum TextureFrame::_internal_value() const {
  return static_cast< ::frame::proto::TextureFrame_Enum >(_impl_.value_);
}
inline ::frame::proto::TextureFrame_Enum TextureFrame::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.TextureFrame.value)
  return _internal_value();
}
inline void TextureFrame::_internal_set_value(::frame::proto::TextureFrame_Enum value) {
  
  _impl_.value_ = value;
}
inline void TextureFrame::set_value(::frame::proto::TextureFrame_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.TextureFrame.value)
}

// -------------------------------------------------------------------

// CubeMapFiles

// string positive_x = 1;
inline void CubeMapFiles::clear_positive_x() {
  _impl_.positive_x_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::positive_x() const {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.positive_x)
  return _internal_positive_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CubeMapFiles::set_positive_x(ArgT0&& arg0, ArgT... args) {
 
 _impl_.positive_x_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.positive_x)
}
inline std::string* CubeMapFiles::mutable_positive_x() {
  std::string* _s = _internal_mutable_positive_x();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.positive_x)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_positive_x() const {
  return _impl_.positive_x_.Get();
}
inline void CubeMapFiles::_internal_set_positive_x(const std::string& value) {
  
  _impl_.positive_x_.Set(value, GetArenaForAllocation());
}
inline std::string* CubeMapFiles::_internal_mutable_positive_x() {
  
  return _impl_.positive_x_.Mutable(GetArenaForAllocation());
}
inline std::string* CubeMapFiles::release_positive_x() {
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.positive_x)
  return _impl_.positive_x_.Release();
}
inline void CubeMapFiles::set_allocated_positive_x(std::string* positive_x) {
  if (positive_x != nullptr) {
    
  } else {
    
  }
  _impl_.positive_x_.SetAllocated(positive_x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.positive_x_.IsDefault()) {
    _impl_.positive_x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.positive_x)
}

// string negative_x = 2;
inline void CubeMapFiles::clear_negative_x() {
  _impl_.negative_x_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::negative_x() const {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.negative_x)
  return _internal_negative_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CubeMapFiles::set_negative_x(ArgT0&& arg0, ArgT... args) {
 
 _impl_.negative_x_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.negative_x)
}
inline std::string* CubeMapFiles::mutable_negative_x() {
  std::string* _s = _internal_mutable_negative_x();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.negative_x)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_negative_x() const {
  return _impl_.negative_x_.Get();
}
inline void CubeMapFiles::_internal_set_negative_x(const std::string& value) {
  
  _impl_.negative_x_.Set(value, GetArenaForAllocation());
}
inline std::string* CubeMapFiles::_internal_mutable_negative_x() {
  
  return _impl_.negative_x_.Mutable(GetArenaForAllocation());
}
inline std::string* CubeMapFiles::release_negative_x() {
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.negative_x)
  return _impl_.negative_x_.Release();
}
inline void CubeMapFiles::set_allocated_negative_x(std::string* negative_x) {
  if (negative_x != nullptr) {
    
  } else {
    
  }
  _impl_.negative_x_.SetAllocated(negative_x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.negative_x_.IsDefault()) {
    _impl_.negative_x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.negative_x)
}

// string positive_y = 3;
inline void CubeMapFiles::clear_positive_y() {
  _impl_.positive_y_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::positive_y() const {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.positive_y)
  return _internal_positive_y();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CubeMapFiles::set_positive_y(ArgT0&& arg0, ArgT... args) {
 
 _impl_.positive_y_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.positive_y)
}
inline std::string* CubeMapFiles::mutable_positive_y() {
  std::string* _s = _internal_mutable_positive_y();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.positive_y)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_positive_y() const {
  return _impl_.positive_y_.Get();
}
inline void CubeMapFiles::_internal_set_positive_y(const std::string& value) {
  
  _impl_.positive_y_.Set(value, GetArenaForAllocation());
}
inline std::string* CubeMapFiles::_internal_mutable_positive_y() {
  
  return _impl_.positive_y_.Mutable(GetArenaForAllocation());
}
inline std::string* CubeMapFiles::release_positive_y() {
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.positive_y)
  return _impl_.positive_y_.Release();
}
inline void CubeMapFiles::set_allocated_positive_y(std::string* positive_y) {
  if (positive_y != nullptr) {
    
  } else {
    
  }
  _impl_.positive_y_.SetAllocated(positive_y, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.positive_y_.IsDefault()) {
    _impl_.positive_y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.positive_y)
}

// string negative_y = 4;
inline void CubeMapFiles::clear_negative_y() {
  _impl_.negative_y_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::negative_y() const {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.negative_y)
  return _internal_negative_y();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CubeMapFiles::set_negative_y(ArgT0&& arg0, ArgT... args) {
 
 _impl_.negative_y_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.negative_y)
}
inline std::string* CubeMapFiles::mutable_negative_y() {
  std::string* _s = _internal_mutable_negative_y();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.negative_y)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_negative_y() const {
  return _impl_.negative_y_.Get();
}
inline void CubeMapFiles::_internal_set_negative_y(const std::string& value) {
  
  _impl_.negative_y_.Set(value, GetArenaForAllocation());
}
inline std::string* CubeMapFiles::_internal_mutable_negative_y() {
  
  return _impl_.negative_y_.Mutable(GetArenaForAllocation());
}
inline std::string* CubeMapFiles::release_negative_y() {
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.negative_y)
  return _impl_.negative_y_.Release();
}
inline void CubeMapFiles::set_allocated_negative_y(std::string* negative_y) {
  if (negative_y != nullptr) {
    
  } else {
    
  }
  _impl_.negative_y_.SetAllocated(negative_y, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.negative_y_.IsDefault()) {
    _impl_.negative_y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.negative_y)
}

// string positive_z = 5;
inline void CubeMapFiles::clear_positive_z() {
  _impl_.positive_z_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::positive_z() const {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.positive_z)
  return _internal_positive_z();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CubeMapFiles::set_positive_z(ArgT0&& arg0, ArgT... args) {
 
 _impl_.positive_z_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.positive_z)
}
inline std::string* CubeMapFiles::mutable_positive_z() {
  std::string* _s = _internal_mutable_positive_z();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.positive_z)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_positive_z() const {
  return _impl_.positive_z_.Get();
}
inline void CubeMapFiles::_internal_set_positive_z(const std::string& value) {
  
  _impl_.positive_z_.Set(value, GetArenaForAllocation());
}
inline std::string* CubeMapFiles::_internal_mutable_positive_z() {
  
  return _impl_.positive_z_.Mutable(GetArenaForAllocation());
}
inline std::string* CubeMapFiles::release_positive_z() {
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.positive_z)
  return _impl_.positive_z_.Release();
}
inline void CubeMapFiles::set_allocated_positive_z(std::string* positive_z) {
  if (positive_z != nullptr) {
    
  } else {
    
  }
  _impl_.positive_z_.SetAllocated(positive_z, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.positive_z_.IsDefault()) {
    _impl_.positive_z_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.positive_z)
}

// string negative_z = 6;
inline void CubeMapFiles::clear_negative_z() {
  _impl_.negative_z_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::negative_z() const {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.negative_z)
  return _internal_negative_z();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CubeMapFiles::set_negative_z(ArgT0&& arg0, ArgT... args) {
 
 _impl_.negative_z_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.negative_z)
}
inline std::string* CubeMapFiles::mutable_negative_z() {
  std::string* _s = _internal_mutable_negative_z();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.negative_z)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_negative_z() const {
  return _impl_.negative_z_.Get();
}
inline void CubeMapFiles::_internal_set_negative_z(const std::string& value) {
  
  _impl_.negative_z_.Set(value, GetArenaForAllocation());
}
inline std::string* CubeMapFiles::_internal_mutable_negative_z() {
  
  return _impl_.negative_z_.Mutable(GetArenaForAllocation());
}
inline std::string* CubeMapFiles::release_negative_z() {
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.negative_z)
  return _impl_.negative_z_.Release();
}
inline void CubeMapFiles::set_allocated_negative_z(std::string* negative_z) {
  if (negative_z != nullptr) {
    
  } else {
    
  }
  _impl_.negative_z_.SetAllocated(negative_z, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.negative_z_.IsDefault()) {
    _impl_.negative_z_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.negative_z)
}

// -------------------------------------------------------------------

// Texture

// string name = 1;
inline void Texture::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Texture::name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Texture::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Texture.name)
}
inline std::string* Texture::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.name)
  return _s;
}
inline const std::string& Texture::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Texture::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Texture::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Texture::release_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.name)
  return _impl_.name_.Release();
}
inline void Texture::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.name)
}

// .frame.proto.Size size = 2;
inline bool Texture::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool Texture::has_size() const {
  return _internal_has_size();
}
inline const ::frame::proto::Size& Texture::_internal_size() const {
  const ::frame::proto::Size* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::Size&>(
      ::frame::proto::_Size_default_instance_);
}
inline const ::frame::proto::Size& Texture::size() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.size)
  return _internal_size();
}
inline void Texture::unsafe_arena_set_allocated_size(
    ::frame::proto::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.size)
}
inline ::frame::proto::Size* Texture::release_size() {
  
  ::frame::proto::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frame::proto::Size* Texture::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.size)
  
  ::frame::proto::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::frame::proto::Size* Texture::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::Size>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::frame::proto::Size* Texture::mutable_size() {
  ::frame::proto::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.size)
  return _msg;
}
inline void Texture::set_allocated_size(::frame::proto::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.size)
}

// bool clear_z = 3;
inline void Texture::clear_clear_z() {
  _impl_.clear_z_ = false;
}
inline bool Texture::_internal_clear_z() const {
  return _impl_.clear_z_;
}
inline bool Texture::clear_z() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.clear_z)
  return _internal_clear_z();
}
inline void Texture::_internal_set_clear_z(bool value) {
  
  _impl_.clear_z_ = value;
}
inline void Texture::set_clear_z(bool value) {
  _internal_set_clear_z(value);
  // @@protoc_insertion_point(field_set:frame.proto.Texture.clear_z)
}

// bool clear_color = 16;
inline void Texture::clear_clear_color() {
  _impl_.clear_color_ = false;
}
inline bool Texture::_internal_clear_color() const {
  return _impl_.clear_color_;
}
inline bool Texture::clear_color() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.clear_color)
  return _internal_clear_color();
}
inline void Texture::_internal_set_clear_color(bool value) {
  
  _impl_.clear_color_ = value;
}
inline void Texture::set_clear_color(bool value) {
  _internal_set_clear_color(value);
  // @@protoc_insertion_point(field_set:frame.proto.Texture.clear_color)
}

// bool mipmap = 4;
inline void Texture::clear_mipmap() {
  _impl_.mipmap_ = false;
}
inline bool Texture::_internal_mipmap() const {
  return _impl_.mipmap_;
}
inline bool Texture::mipmap() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.mipmap)
  return _internal_mipmap();
}
inline void Texture::_internal_set_mipmap(bool value) {
  
  _impl_.mipmap_ = value;
}
inline void Texture::set_mipmap(bool value) {
  _internal_set_mipmap(value);
  // @@protoc_insertion_point(field_set:frame.proto.Texture.mipmap)
}

// bool cubemap = 5;
inline void Texture::clear_cubemap() {
  _impl_.cubemap_ = false;
}
inline bool Texture::_internal_cubemap() const {
  return _impl_.cubemap_;
}
inline bool Texture::cubemap() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.cubemap)
  return _internal_cubemap();
}
inline void Texture::_internal_set_cubemap(bool value) {
  
  _impl_.cubemap_ = value;
}
inline void Texture::set_cubemap(bool value) {
  _internal_set_cubemap(value);
  // @@protoc_insertion_point(field_set:frame.proto.Texture.cubemap)
}

// .frame.proto.PixelElementSize pixel_element_size = 6;
inline bool Texture::_internal_has_pixel_element_size() const {
  return this != internal_default_instance() && _impl_.pixel_element_size_ != nullptr;
}
inline bool Texture::has_pixel_element_size() const {
  return _internal_has_pixel_element_size();
}
inline const ::frame::proto::PixelElementSize& Texture::_internal_pixel_element_size() const {
  const ::frame::proto::PixelElementSize* p = _impl_.pixel_element_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::PixelElementSize&>(
      ::frame::proto::_PixelElementSize_default_instance_);
}
inline const ::frame::proto::PixelElementSize& Texture::pixel_element_size() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.pixel_element_size)
  return _internal_pixel_element_size();
}
inline void Texture::unsafe_arena_set_allocated_pixel_element_size(
    ::frame::proto::PixelElementSize* pixel_element_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pixel_element_size_);
  }
  _impl_.pixel_element_size_ = pixel_element_size;
  if (pixel_element_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.pixel_element_size)
}
inline ::frame::proto::PixelElementSize* Texture::release_pixel_element_size() {
  
  ::frame::proto::PixelElementSize* temp = _impl_.pixel_element_size_;
  _impl_.pixel_element_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frame::proto::PixelElementSize* Texture::unsafe_arena_release_pixel_element_size() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.pixel_element_size)
  
  ::frame::proto::PixelElementSize* temp = _impl_.pixel_element_size_;
  _impl_.pixel_element_size_ = nullptr;
  return temp;
}
inline ::frame::proto::PixelElementSize* Texture::_internal_mutable_pixel_element_size() {
  
  if (_impl_.pixel_element_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::PixelElementSize>(GetArenaForAllocation());
    _impl_.pixel_element_size_ = p;
  }
  return _impl_.pixel_element_size_;
}
inline ::frame::proto::PixelElementSize* Texture::mutable_pixel_element_size() {
  ::frame::proto::PixelElementSize* _msg = _internal_mutable_pixel_element_size();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.pixel_element_size)
  return _msg;
}
inline void Texture::set_allocated_pixel_element_size(::frame::proto::PixelElementSize* pixel_element_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pixel_element_size_);
  }
  if (pixel_element_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pixel_element_size));
    if (message_arena != submessage_arena) {
      pixel_element_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pixel_element_size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pixel_element_size_ = pixel_element_size;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.pixel_element_size)
}

// .frame.proto.PixelStructure pixel_structure = 7;
inline bool Texture::_internal_has_pixel_structure() const {
  return this != internal_default_instance() && _impl_.pixel_structure_ != nullptr;
}
inline bool Texture::has_pixel_structure() const {
  return _internal_has_pixel_structure();
}
inline const ::frame::proto::PixelStructure& Texture::_internal_pixel_structure() const {
  const ::frame::proto::PixelStructure* p = _impl_.pixel_structure_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::PixelStructure&>(
      ::frame::proto::_PixelStructure_default_instance_);
}
inline const ::frame::proto::PixelStructure& Texture::pixel_structure() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.pixel_structure)
  return _internal_pixel_structure();
}
inline void Texture::unsafe_arena_set_allocated_pixel_structure(
    ::frame::proto::PixelStructure* pixel_structure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pixel_structure_);
  }
  _impl_.pixel_structure_ = pixel_structure;
  if (pixel_structure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.pixel_structure)
}
inline ::frame::proto::PixelStructure* Texture::release_pixel_structure() {
  
  ::frame::proto::PixelStructure* temp = _impl_.pixel_structure_;
  _impl_.pixel_structure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frame::proto::PixelStructure* Texture::unsafe_arena_release_pixel_structure() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.pixel_structure)
  
  ::frame::proto::PixelStructure* temp = _impl_.pixel_structure_;
  _impl_.pixel_structure_ = nullptr;
  return temp;
}
inline ::frame::proto::PixelStructure* Texture::_internal_mutable_pixel_structure() {
  
  if (_impl_.pixel_structure_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::PixelStructure>(GetArenaForAllocation());
    _impl_.pixel_structure_ = p;
  }
  return _impl_.pixel_structure_;
}
inline ::frame::proto::PixelStructure* Texture::mutable_pixel_structure() {
  ::frame::proto::PixelStructure* _msg = _internal_mutable_pixel_structure();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.pixel_structure)
  return _msg;
}
inline void Texture::set_allocated_pixel_structure(::frame::proto::PixelStructure* pixel_structure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pixel_structure_);
  }
  if (pixel_structure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pixel_structure));
    if (message_arena != submessage_arena) {
      pixel_structure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pixel_structure, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pixel_structure_ = pixel_structure;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.pixel_structure)
}

// .frame.proto.TextureFilter min_filter = 8;
inline bool Texture::_internal_has_min_filter() const {
  return this != internal_default_instance() && _impl_.min_filter_ != nullptr;
}
inline bool Texture::has_min_filter() const {
  return _internal_has_min_filter();
}
inline void Texture::clear_min_filter() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_filter_ != nullptr) {
    delete _impl_.min_filter_;
  }
  _impl_.min_filter_ = nullptr;
}
inline const ::frame::proto::TextureFilter& Texture::_internal_min_filter() const {
  const ::frame::proto::TextureFilter* p = _impl_.min_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::TextureFilter&>(
      ::frame::proto::_TextureFilter_default_instance_);
}
inline const ::frame::proto::TextureFilter& Texture::min_filter() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.min_filter)
  return _internal_min_filter();
}
inline void Texture::unsafe_arena_set_allocated_min_filter(
    ::frame::proto::TextureFilter* min_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_filter_);
  }
  _impl_.min_filter_ = min_filter;
  if (min_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.min_filter)
}
inline ::frame::proto::TextureFilter* Texture::release_min_filter() {
  
  ::frame::proto::TextureFilter* temp = _impl_.min_filter_;
  _impl_.min_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::unsafe_arena_release_min_filter() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.min_filter)
  
  ::frame::proto::TextureFilter* temp = _impl_.min_filter_;
  _impl_.min_filter_ = nullptr;
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::_internal_mutable_min_filter() {
  
  if (_impl_.min_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::TextureFilter>(GetArenaForAllocation());
    _impl_.min_filter_ = p;
  }
  return _impl_.min_filter_;
}
inline ::frame::proto::TextureFilter* Texture::mutable_min_filter() {
  ::frame::proto::TextureFilter* _msg = _internal_mutable_min_filter();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.min_filter)
  return _msg;
}
inline void Texture::set_allocated_min_filter(::frame::proto::TextureFilter* min_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.min_filter_;
  }
  if (min_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(min_filter);
    if (message_arena != submessage_arena) {
      min_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_filter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_filter_ = min_filter;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.min_filter)
}

// .frame.proto.TextureFilter mag_filter = 9;
inline bool Texture::_internal_has_mag_filter() const {
  return this != internal_default_instance() && _impl_.mag_filter_ != nullptr;
}
inline bool Texture::has_mag_filter() const {
  return _internal_has_mag_filter();
}
inline void Texture::clear_mag_filter() {
  if (GetArenaForAllocation() == nullptr && _impl_.mag_filter_ != nullptr) {
    delete _impl_.mag_filter_;
  }
  _impl_.mag_filter_ = nullptr;
}
inline const ::frame::proto::TextureFilter& Texture::_internal_mag_filter() const {
  const ::frame::proto::TextureFilter* p = _impl_.mag_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::TextureFilter&>(
      ::frame::proto::_TextureFilter_default_instance_);
}
inline const ::frame::proto::TextureFilter& Texture::mag_filter() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.mag_filter)
  return _internal_mag_filter();
}
inline void Texture::unsafe_arena_set_allocated_mag_filter(
    ::frame::proto::TextureFilter* mag_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mag_filter_);
  }
  _impl_.mag_filter_ = mag_filter;
  if (mag_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.mag_filter)
}
inline ::frame::proto::TextureFilter* Texture::release_mag_filter() {
  
  ::frame::proto::TextureFilter* temp = _impl_.mag_filter_;
  _impl_.mag_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::unsafe_arena_release_mag_filter() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.mag_filter)
  
  ::frame::proto::TextureFilter* temp = _impl_.mag_filter_;
  _impl_.mag_filter_ = nullptr;
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::_internal_mutable_mag_filter() {
  
  if (_impl_.mag_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::TextureFilter>(GetArenaForAllocation());
    _impl_.mag_filter_ = p;
  }
  return _impl_.mag_filter_;
}
inline ::frame::proto::TextureFilter* Texture::mutable_mag_filter() {
  ::frame::proto::TextureFilter* _msg = _internal_mutable_mag_filter();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.mag_filter)
  return _msg;
}
inline void Texture::set_allocated_mag_filter(::frame::proto::TextureFilter* mag_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mag_filter_;
  }
  if (mag_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mag_filter);
    if (message_arena != submessage_arena) {
      mag_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mag_filter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mag_filter_ = mag_filter;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.mag_filter)
}

// .frame.proto.TextureFilter wrap_s = 10;
inline bool Texture::_internal_has_wrap_s() const {
  return this != internal_default_instance() && _impl_.wrap_s_ != nullptr;
}
inline bool Texture::has_wrap_s() const {
  return _internal_has_wrap_s();
}
inline void Texture::clear_wrap_s() {
  if (GetArenaForAllocation() == nullptr && _impl_.wrap_s_ != nullptr) {
    delete _impl_.wrap_s_;
  }
  _impl_.wrap_s_ = nullptr;
}
inline const ::frame::proto::TextureFilter& Texture::_internal_wrap_s() const {
  const ::frame::proto::TextureFilter* p = _impl_.wrap_s_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::TextureFilter&>(
      ::frame::proto::_TextureFilter_default_instance_);
}
inline const ::frame::proto::TextureFilter& Texture::wrap_s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.wrap_s)
  return _internal_wrap_s();
}
inline void Texture::unsafe_arena_set_allocated_wrap_s(
    ::frame::proto::TextureFilter* wrap_s) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrap_s_);
  }
  _impl_.wrap_s_ = wrap_s;
  if (wrap_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.wrap_s)
}
inline ::frame::proto::TextureFilter* Texture::release_wrap_s() {
  
  ::frame::proto::TextureFilter* temp = _impl_.wrap_s_;
  _impl_.wrap_s_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::unsafe_arena_release_wrap_s() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.wrap_s)
  
  ::frame::proto::TextureFilter* temp = _impl_.wrap_s_;
  _impl_.wrap_s_ = nullptr;
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::_internal_mutable_wrap_s() {
  
  if (_impl_.wrap_s_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::TextureFilter>(GetArenaForAllocation());
    _impl_.wrap_s_ = p;
  }
  return _impl_.wrap_s_;
}
inline ::frame::proto::TextureFilter* Texture::mutable_wrap_s() {
  ::frame::proto::TextureFilter* _msg = _internal_mutable_wrap_s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.wrap_s)
  return _msg;
}
inline void Texture::set_allocated_wrap_s(::frame::proto::TextureFilter* wrap_s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.wrap_s_;
  }
  if (wrap_s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wrap_s);
    if (message_arena != submessage_arena) {
      wrap_s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrap_s, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrap_s_ = wrap_s;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.wrap_s)
}

// .frame.proto.TextureFilter wrap_t = 11;
inline bool Texture::_internal_has_wrap_t() const {
  return this != internal_default_instance() && _impl_.wrap_t_ != nullptr;
}
inline bool Texture::has_wrap_t() const {
  return _internal_has_wrap_t();
}
inline void Texture::clear_wrap_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.wrap_t_ != nullptr) {
    delete _impl_.wrap_t_;
  }
  _impl_.wrap_t_ = nullptr;
}
inline const ::frame::proto::TextureFilter& Texture::_internal_wrap_t() const {
  const ::frame::proto::TextureFilter* p = _impl_.wrap_t_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::TextureFilter&>(
      ::frame::proto::_TextureFilter_default_instance_);
}
inline const ::frame::proto::TextureFilter& Texture::wrap_t() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.wrap_t)
  return _internal_wrap_t();
}
inline void Texture::unsafe_arena_set_allocated_wrap_t(
    ::frame::proto::TextureFilter* wrap_t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrap_t_);
  }
  _impl_.wrap_t_ = wrap_t;
  if (wrap_t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.wrap_t)
}
inline ::frame::proto::TextureFilter* Texture::release_wrap_t() {
  
  ::frame::proto::TextureFilter* temp = _impl_.wrap_t_;
  _impl_.wrap_t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::unsafe_arena_release_wrap_t() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.wrap_t)
  
  ::frame::proto::TextureFilter* temp = _impl_.wrap_t_;
  _impl_.wrap_t_ = nullptr;
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::_internal_mutable_wrap_t() {
  
  if (_impl_.wrap_t_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::TextureFilter>(GetArenaForAllocation());
    _impl_.wrap_t_ = p;
  }
  return _impl_.wrap_t_;
}
inline ::frame::proto::TextureFilter* Texture::mutable_wrap_t() {
  ::frame::proto::TextureFilter* _msg = _internal_mutable_wrap_t();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.wrap_t)
  return _msg;
}
inline void Texture::set_allocated_wrap_t(::frame::proto::TextureFilter* wrap_t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.wrap_t_;
  }
  if (wrap_t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wrap_t);
    if (message_arena != submessage_arena) {
      wrap_t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrap_t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrap_t_ = wrap_t;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.wrap_t)
}

// bytes pixels = 13;
inline bool Texture::_internal_has_pixels() const {
  return texture_oneof_case() == kPixels;
}
inline bool Texture::has_pixels() const {
  return _internal_has_pixels();
}
inline void Texture::set_has_pixels() {
  _impl_._oneof_case_[0] = kPixels;
}
inline void Texture::clear_pixels() {
  if (_internal_has_pixels()) {
    _impl_.texture_oneof_.pixels_.Destroy();
    clear_has_texture_oneof();
  }
}
inline const std::string& Texture::pixels() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.pixels)
  return _internal_pixels();
}
template <typename ArgT0, typename... ArgT>
inline void Texture::set_pixels(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_pixels()) {
    clear_texture_oneof();
    set_has_pixels();
    _impl_.texture_oneof_.pixels_.InitDefault();
  }
  _impl_.texture_oneof_.pixels_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Texture.pixels)
}
inline std::string* Texture::mutable_pixels() {
  std::string* _s = _internal_mutable_pixels();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.pixels)
  return _s;
}
inline const std::string& Texture::_internal_pixels() const {
  if (_internal_has_pixels()) {
    return _impl_.texture_oneof_.pixels_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Texture::_internal_set_pixels(const std::string& value) {
  if (!_internal_has_pixels()) {
    clear_texture_oneof();
    set_has_pixels();
    _impl_.texture_oneof_.pixels_.InitDefault();
  }
  _impl_.texture_oneof_.pixels_.Set(value, GetArenaForAllocation());
}
inline std::string* Texture::_internal_mutable_pixels() {
  if (!_internal_has_pixels()) {
    clear_texture_oneof();
    set_has_pixels();
    _impl_.texture_oneof_.pixels_.InitDefault();
  }
  return _impl_.texture_oneof_.pixels_.Mutable(      GetArenaForAllocation());
}
inline std::string* Texture::release_pixels() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.pixels)
  if (_internal_has_pixels()) {
    clear_has_texture_oneof();
    return _impl_.texture_oneof_.pixels_.Release();
  } else {
    return nullptr;
  }
}
inline void Texture::set_allocated_pixels(std::string* pixels) {
  if (has_texture_oneof()) {
    clear_texture_oneof();
  }
  if (pixels != nullptr) {
    set_has_pixels();
    _impl_.texture_oneof_.pixels_.InitAllocated(pixels, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.pixels)
}

// string file_name = 14;
inline bool Texture::_internal_has_file_name() const {
  return texture_oneof_case() == kFileName;
}
inline bool Texture::has_file_name() const {
  return _internal_has_file_name();
}
inline void Texture::set_has_file_name() {
  _impl_._oneof_case_[0] = kFileName;
}
inline void Texture::clear_file_name() {
  if (_internal_has_file_name()) {
    _impl_.texture_oneof_.file_name_.Destroy();
    clear_has_texture_oneof();
  }
}
inline const std::string& Texture::file_name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline void Texture::set_file_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_file_name()) {
    clear_texture_oneof();
    set_has_file_name();
    _impl_.texture_oneof_.file_name_.InitDefault();
  }
  _impl_.texture_oneof_.file_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Texture.file_name)
}
inline std::string* Texture::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.file_name)
  return _s;
}
inline const std::string& Texture::_internal_file_name() const {
  if (_internal_has_file_name()) {
    return _impl_.texture_oneof_.file_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Texture::_internal_set_file_name(const std::string& value) {
  if (!_internal_has_file_name()) {
    clear_texture_oneof();
    set_has_file_name();
    _impl_.texture_oneof_.file_name_.InitDefault();
  }
  _impl_.texture_oneof_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Texture::_internal_mutable_file_name() {
  if (!_internal_has_file_name()) {
    clear_texture_oneof();
    set_has_file_name();
    _impl_.texture_oneof_.file_name_.InitDefault();
  }
  return _impl_.texture_oneof_.file_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* Texture::release_file_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.file_name)
  if (_internal_has_file_name()) {
    clear_has_texture_oneof();
    return _impl_.texture_oneof_.file_name_.Release();
  } else {
    return nullptr;
  }
}
inline void Texture::set_allocated_file_name(std::string* file_name) {
  if (has_texture_oneof()) {
    clear_texture_oneof();
  }
  if (file_name != nullptr) {
    set_has_file_name();
    _impl_.texture_oneof_.file_name_.InitAllocated(file_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.file_name)
}

// .frame.proto.Plugin plugin = 17;
inline bool Texture::_internal_has_plugin() const {
  return texture_oneof_case() == kPlugin;
}
inline bool Texture::has_plugin() const {
  return _internal_has_plugin();
}
inline void Texture::set_has_plugin() {
  _impl_._oneof_case_[0] = kPlugin;
}
inline ::frame::proto::Plugin* Texture::release_plugin() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.plugin)
  if (_internal_has_plugin()) {
    clear_has_texture_oneof();
    ::frame::proto::Plugin* temp = _impl_.texture_oneof_.plugin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.texture_oneof_.plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Plugin& Texture::_internal_plugin() const {
  return _internal_has_plugin()
      ? *_impl_.texture_oneof_.plugin_
      : reinterpret_cast< ::frame::proto::Plugin&>(::frame::proto::_Plugin_default_instance_);
}
inline const ::frame::proto::Plugin& Texture::plugin() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.plugin)
  return _internal_plugin();
}
inline ::frame::proto::Plugin* Texture::unsafe_arena_release_plugin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Texture.plugin)
  if (_internal_has_plugin()) {
    clear_has_texture_oneof();
    ::frame::proto::Plugin* temp = _impl_.texture_oneof_.plugin_;
    _impl_.texture_oneof_.plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Texture::unsafe_arena_set_allocated_plugin(::frame::proto::Plugin* plugin) {
  clear_texture_oneof();
  if (plugin) {
    set_has_plugin();
    _impl_.texture_oneof_.plugin_ = plugin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.plugin)
}
inline ::frame::proto::Plugin* Texture::_internal_mutable_plugin() {
  if (!_internal_has_plugin()) {
    clear_texture_oneof();
    set_has_plugin();
    _impl_.texture_oneof_.plugin_ = CreateMaybeMessage< ::frame::proto::Plugin >(GetArenaForAllocation());
  }
  return _impl_.texture_oneof_.plugin_;
}
inline ::frame::proto::Plugin* Texture::mutable_plugin() {
  ::frame::proto::Plugin* _msg = _internal_mutable_plugin();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.plugin)
  return _msg;
}

// .frame.proto.CubeMapFiles file_names = 15;
inline bool Texture::_internal_has_file_names() const {
  return texture_oneof_case() == kFileNames;
}
inline bool Texture::has_file_names() const {
  return _internal_has_file_names();
}
inline void Texture::set_has_file_names() {
  _impl_._oneof_case_[0] = kFileNames;
}
inline void Texture::clear_file_names() {
  if (_internal_has_file_names()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.texture_oneof_.file_names_;
    }
    clear_has_texture_oneof();
  }
}
inline ::frame::proto::CubeMapFiles* Texture::release_file_names() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.file_names)
  if (_internal_has_file_names()) {
    clear_has_texture_oneof();
    ::frame::proto::CubeMapFiles* temp = _impl_.texture_oneof_.file_names_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.texture_oneof_.file_names_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::CubeMapFiles& Texture::_internal_file_names() const {
  return _internal_has_file_names()
      ? *_impl_.texture_oneof_.file_names_
      : reinterpret_cast< ::frame::proto::CubeMapFiles&>(::frame::proto::_CubeMapFiles_default_instance_);
}
inline const ::frame::proto::CubeMapFiles& Texture::file_names() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.file_names)
  return _internal_file_names();
}
inline ::frame::proto::CubeMapFiles* Texture::unsafe_arena_release_file_names() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Texture.file_names)
  if (_internal_has_file_names()) {
    clear_has_texture_oneof();
    ::frame::proto::CubeMapFiles* temp = _impl_.texture_oneof_.file_names_;
    _impl_.texture_oneof_.file_names_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Texture::unsafe_arena_set_allocated_file_names(::frame::proto::CubeMapFiles* file_names) {
  clear_texture_oneof();
  if (file_names) {
    set_has_file_names();
    _impl_.texture_oneof_.file_names_ = file_names;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.file_names)
}
inline ::frame::proto::CubeMapFiles* Texture::_internal_mutable_file_names() {
  if (!_internal_has_file_names()) {
    clear_texture_oneof();
    set_has_file_names();
    _impl_.texture_oneof_.file_names_ = CreateMaybeMessage< ::frame::proto::CubeMapFiles >(GetArenaForAllocation());
  }
  return _impl_.texture_oneof_.file_names_;
}
inline ::frame::proto::CubeMapFiles* Texture::mutable_file_names() {
  ::frame::proto::CubeMapFiles* _msg = _internal_mutable_file_names();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.file_names)
  return _msg;
}

inline bool Texture::has_texture_oneof() const {
  return texture_oneof_case() != TEXTURE_ONEOF_NOT_SET;
}
inline void Texture::clear_has_texture_oneof() {
  _impl_._oneof_case_[0] = TEXTURE_ONEOF_NOT_SET;
}
inline Texture::TextureOneofCase Texture::texture_oneof_case() const {
  return Texture::TextureOneofCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frame::proto::TextureFilter_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::TextureFilter_Enum>() {
  return ::frame::proto::TextureFilter_Enum_descriptor();
}
template <> struct is_proto_enum< ::frame::proto::TextureFrame_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::TextureFrame_Enum>() {
  return ::frame::proto::TextureFrame_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_texture_2eproto
